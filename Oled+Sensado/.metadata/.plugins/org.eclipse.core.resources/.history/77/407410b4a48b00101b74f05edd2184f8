/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : OLED SSD1306 + 2x MAX6675 (CS1=PA7, CS2=PA4) – sin UART
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
#include "i2c.h"
#include "gpio.h"
#include "fonts.h"
#include "ssd1306_oled.h"
#include "max6675.h"
#include "delays.h"
#include <stdio.h>
#include <string.h>

/* Private function prototypes -----------------------------------------------*/
void   SystemClock_Config(void);
static void Setup_MAX6675_Pins(void);

/* === Variables afuera del while, como pediste === */
float t1, t2;
char  texto[100];

int main(void)
{
  HAL_Init();
  SystemClock_Config();

  MX_GPIO_Init();        // init general de CubeMX (si lo usás)
  Setup_MAX6675_Pins();  // asegura modos/estados de DAT/CK/CSx

  MX_I2C1_Init();        // I2C para la OLED

  delay_us_dwt_init();   // habilita Delay_us por DWT (usado por MAX6675)
  MAX6675_init();        // deja CK=0 y CS inactivos

  SSD1306_Init();
  SSD1306_Clear();
  SSD1306_UpdateScreen();

  while (1)
  {
      /* Lee ambos sensores: comparten CK/DAT y cambian solo el CS */
      t1 = MAX6675_lee_cs(CS_MAX_GPIO_Port,  CS_MAX_Pin);   // sensor 1 (CS1=PA7)
      Delay_ms(5);  // pequeña separación (opcional)
      t2 = MAX6675_lee_cs(CS2_MAX_GPIO_Port, CS2_MAX_Pin);  // sensor 2 (CS2=PA4)

      /* Mostrar en la OLED (dos líneas grandes) */
      SSD1306_Clear();

      SSD1306_GotoXY(8, 12);
      sprintf(texto, "T1: %.1f C", t1);
      SSD1306_Puts(texto, &Font_11x18, WHITE);

      SSD1306_GotoXY(8, 36);
      sprintf(texto, "T2: %.1f C", t2);
      SSD1306_Puts(texto, &Font_11x18, WHITE);

      SSD1306_UpdateScreen();

      HAL_Delay(1000);
  }
}

/* ==== Reloj básico por HSI (ajustá si usás HSE/PLL) ==== */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK
                                   | RCC_CLOCKTYPE_SYSCLK
                                   | RCC_CLOCKTYPE_PCLK1
                                   | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) { Error_Handler(); }
}

/* ==== Configuración específica de los pines del MAX6675 ==== */
static void Setup_MAX6675_Pins(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* DAT (DO del MAX) como entrada – pull-up recomendado */
  GPIO_InitStruct.Pin  = DAT_MAX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);

  /* CK y CSx como salidas push-pull */
  GPIO_InitStruct.Pin   = CK_MAX_Pin;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(CK_MAX_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin   = CS_MAX_Pin;
  HAL_GPIO_Init(CS_MAX_GPIO_Port, &GPIO_InitStruct);

  GPIO_InitStruct.Pin   = CS2_MAX_Pin;  // CS del segundo sensor (PA4)
  HAL_GPIO_Init(CS2_MAX_GPIO_Port, &GPIO_InitStruct);

  /* Estados por defecto del bus */
  HAL_GPIO_WritePin(CK_MAX_GPIO_Port, CK_MAX_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(CS_MAX_GPIO_Port,  CS_MAX_Pin,  GPIO_PIN_SET);
  HAL_GPIO_WritePin(CS2_MAX_GPIO_Port, CS2_MAX_Pin, GPIO_PIN_SET);
}

void Error_Handler(void)
{
  __disable_irq();
  while (1) { }
}






#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
