/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Muestra T1 y T2 en OLED con dos MAX6675 (CS1 y CS2=PA4)
  ******************************************************************************
  */
#include "main.h"
#include <stdio.h>

#include "delays.h"
#include "max6675.h"
#include "fonts.h"
#include "ssd1306_oled.h"

/* ==== I2C del OLED ==== */
I2C_HandleTypeDef hi2c1;

/* ==== Variables de aplicación ==== */
float t1, t2;        // afuera del while, como pediste
char  linea[32];

/* ==== Prototipos ==== */
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);

static void OLED_PrintTemps(float v1, float v2);

/* ==== MAIN ==== */
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_I2C1_Init();

  /* OLED: inicializa y verifica que el dispositivo responda */
  if (!SSD1306_Init()) {
    /* Si falla el I2C/addr, quedate acá (o parpadear un LED) */
    while (1) { }
  }
  SSD1306_Clear();   // limpia framebuffer y actualiza

  /* Timing para Delay_us() y MAX6675 */
  delay_us_dwt_init();
  MAX6675_init();

  /* Mensaje de arranque 1s */
  SSD1306_GotoXY(10, 0);
  SSD1306_Puts("OLED OK", &Font_11x18, WHITE);
  SSD1306_UpdateScreen();
  HAL_Delay(1000);

  while (1)
  {
      /* Lee ambos sensores: comparten CK/DAT y cambian solo el CS */
      t1 = MAX6675_lee_cs(CS_MAX_GPIO_Port,  CS_MAX_Pin);
      t2 = MAX6675_lee_cs(CS2_MAX_GPIO_Port, CS2_MAX_Pin);

      /* Dibuja en la pantalla */
      OLED_PrintTemps(t1, t2);

      HAL_Delay(1000);
  }
}

/* ======= OLED helper ======= */
static void OLED_PrintTemps(float v1, float v2)
{
  SSD1306_Fill(BLACK);
  SSD1306_GotoXY(0, 0);
  snprintf(linea, sizeof(linea), "T1: %.1f C", v1);
  SSD1306_Puts(linea, &Font_11x18, WHITE);

  SSD1306_GotoXY(0, 22);
  snprintf(linea, sizeof(linea), "T2: %.1f C", v2);
  SSD1306_Puts(linea, &Font_11x18, WHITE);

  SSD1306_UpdateScreen();
}

/* ======= I2C1 @400 kHz para SSD1306 ======= */
static void MX_I2C1_Init(void)
{
  hi2c1.Instance             = I2C1;
  hi2c1.Init.ClockSpeed      = 400000;
  hi2c1.Init.DutyCycle       = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1     = 0;
  hi2c1.Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2     = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) { Error_Handler(); }
}

/* ======= GPIO: CK, DAT, CS1 y CS2(=PA4) ======= */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  __HAL_RCC_GPIOA_CLK_ENABLE();

  /* Dejar CK=0, CS1=CS2 en alto (inactivos) */
  HAL_GPIO_WritePin(GPIOA, CK_MAX_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(CS_MAX_GPIO_Port,  CS_MAX_Pin,  GPIO_PIN_SET);
  HAL_GPIO_WritePin(CS2_MAX_GPIO_Port, CS2_MAX_Pin, GPIO_PIN_SET);

  /* DAT como entrada */
  GPIO_InitStruct.Pin  = DAT_MAX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DAT_MAX_GPIO_Port, &GPIO_InitStruct);

  /* CK + CS1 como salida */
  GPIO_InitStruct.Pin   = CK_MAX_Pin | CS_MAX_Pin;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* CS2 como salida */
  GPIO_InitStruct.Pin   = CS2_MAX_Pin;
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS2_MAX_GPIO_Port, &GPIO_InitStruct);
}

/* ======= Reloj simple con HSI ======= */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_RCC_PWR_CLK_ENABLE();
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) { Error_Handler(); }

  RCC_ClkInitStruct.ClockType      = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                                   | RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) { Error_Handler(); }
}

/* ======= Error handler ======= */
void Error_Handler(void)
{
  __disable_irq();
  while (1) { }
}








#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
