
Oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  080034cc  080034cc  000044cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  0000606c  2**0
                  CONTENTS
  4 .ARM          00000000  08004a5c  08004a5c  0000606c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a5c  08004a5c  0000606c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a5c  08004a5c  00005a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a60  08004a60  00005a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08004a64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  2000006c  08004ad0  0000606c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000648  08004ad0  00006648  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000606c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e1d  00000000  00000000  00006095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001701  00000000  00000000  0000ceb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000e5b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ef  00000000  00000000  0000ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017192  00000000  00000000  0000f36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a67c  00000000  00000000  00026501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008288a  00000000  00000000  00030b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3407  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023fc  00000000  00000000  000b344c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  000b5848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000006c 	.word	0x2000006c
 8000128:	00000000 	.word	0x00000000
 800012c:	080034b4 	.word	0x080034b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000070 	.word	0x20000070
 8000148:	080034b4 	.word	0x080034b4

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af02      	add	r7, sp, #8
	HAL_Init();
 8000152:	f001 f84b 	bl	80011ec <HAL_Init>
	SystemClock_Config();
 8000156:	f000 f8cd 	bl	80002f4 <SystemClock_Config>
	MX_GPIO_Init();
 800015a:	f000 f93f 	bl	80003dc <MX_GPIO_Init>
	MX_I2C1_Init();
 800015e:	f000 f90f 	bl	8000380 <MX_I2C1_Init>
	SSD1306_Init();
 8000162:	f000 f96f 	bl	8000444 <SSD1306_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000166:	f001 f841 	bl	80011ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800016a:	f000 f8c3 	bl	80002f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016e:	f000 f935 	bl	80003dc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000172:	f000 f905 	bl	8000380 <MX_I2C1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SSD1306_GotoXY(10,20);
 8000176:	2114      	movs	r1, #20
 8000178:	200a      	movs	r0, #10
 800017a:	f000 facb 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("OLED I2C SSD1306", &Font_7x10, WHITE);
 800017e:	2201      	movs	r2, #1
 8000180:	494f      	ldr	r1, [pc, #316]	@ (80002c0 <main+0x174>)
 8000182:	4850      	ldr	r0, [pc, #320]	@ (80002c4 <main+0x178>)
 8000184:	f000 fb5a 	bl	800083c <SSD1306_Puts>
	  		SSD1306_GotoXY(15,40);
 8000188:	2128      	movs	r1, #40	@ 0x28
 800018a:	200f      	movs	r0, #15
 800018c:	f000 fac2 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("STM32F103C8T6", &Font_7x10, WHITE);
 8000190:	2201      	movs	r2, #1
 8000192:	494b      	ldr	r1, [pc, #300]	@ (80002c0 <main+0x174>)
 8000194:	484c      	ldr	r0, [pc, #304]	@ (80002c8 <main+0x17c>)
 8000196:	f000 fb51 	bl	800083c <SSD1306_Puts>
	  		SSD1306_UpdateScreen();
 800019a:	f000 fa17 	bl	80005cc <SSD1306_UpdateScreen>
	  		HAL_Delay(2000);
 800019e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80001a2:	f001 f885 	bl	80012b0 <HAL_Delay>

	  		SSD1306_Clear();
 80001a6:	f000 fe82 	bl	8000eae <SSD1306_Clear>

	  		// Primera línea: "Set: °C"
	  		SSD1306_GotoXY(10, 0);
 80001aa:	2100      	movs	r1, #0
 80001ac:	200a      	movs	r0, #10
 80001ae:	f000 fab1 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("Set: 100 ", &Font_7x10, WHITE);
 80001b2:	2201      	movs	r2, #1
 80001b4:	4942      	ldr	r1, [pc, #264]	@ (80002c0 <main+0x174>)
 80001b6:	4845      	ldr	r0, [pc, #276]	@ (80002cc <main+0x180>)
 80001b8:	f000 fb40 	bl	800083c <SSD1306_Puts>
	  		SSD1306_DrawCircle(16, 10, 2, WHITE);
 80001bc:	2301      	movs	r3, #1
 80001be:	2202      	movs	r2, #2
 80001c0:	210a      	movs	r1, #10
 80001c2:	2010      	movs	r0, #16
 80001c4:	f000 fcc4 	bl	8000b50 <SSD1306_DrawCircle>
	  		SSD1306_GotoXY(20, 10);
 80001c8:	210a      	movs	r1, #10
 80001ca:	2014      	movs	r0, #20
 80001cc:	f000 faa2 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("C:", &Font_7x10, WHITE);
 80001d0:	2201      	movs	r2, #1
 80001d2:	493b      	ldr	r1, [pc, #236]	@ (80002c0 <main+0x174>)
 80001d4:	483e      	ldr	r0, [pc, #248]	@ (80002d0 <main+0x184>)
 80001d6:	f000 fb31 	bl	800083c <SSD1306_Puts>

	  		// Segunda línea: "PID/Ramp"
	  		SSD1306_GotoXY(10, 20);
 80001da:	2114      	movs	r1, #20
 80001dc:	200a      	movs	r0, #10
 80001de:	f000 fa99 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("PID/Ramp", &Font_7x10, WHITE);
 80001e2:	2201      	movs	r2, #1
 80001e4:	4936      	ldr	r1, [pc, #216]	@ (80002c0 <main+0x174>)
 80001e6:	483b      	ldr	r0, [pc, #236]	@ (80002d4 <main+0x188>)
 80001e8:	f000 fb28 	bl	800083c <SSD1306_Puts>

	  		// Tercera línea: Nueva línea de texto
	  		SSD1306_GotoXY(10, 30);
 80001ec:	211e      	movs	r1, #30
 80001ee:	200a      	movs	r0, #10
 80001f0:	f000 fa90 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("Menu 1", &Font_7x10, WHITE);
 80001f4:	2201      	movs	r2, #1
 80001f6:	4932      	ldr	r1, [pc, #200]	@ (80002c0 <main+0x174>)
 80001f8:	4837      	ldr	r0, [pc, #220]	@ (80002d8 <main+0x18c>)
 80001fa:	f000 fb1f 	bl	800083c <SSD1306_Puts>

	  		// Cuarta línea: Nueva línea de texto
	  		SSD1306_GotoXY(10, 40);
 80001fe:	2128      	movs	r1, #40	@ 0x28
 8000200:	200a      	movs	r0, #10
 8000202:	f000 fa87 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("Menu 2", &Font_7x10, WHITE);
 8000206:	2201      	movs	r2, #1
 8000208:	492d      	ldr	r1, [pc, #180]	@ (80002c0 <main+0x174>)
 800020a:	4834      	ldr	r0, [pc, #208]	@ (80002dc <main+0x190>)
 800020c:	f000 fb16 	bl	800083c <SSD1306_Puts>

	  		// Quinta línea: Nueva línea de texto
	  		SSD1306_GotoXY(10, 50);
 8000210:	2132      	movs	r1, #50	@ 0x32
 8000212:	200a      	movs	r0, #10
 8000214:	f000 fa7e 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("Menu 3", &Font_7x10, WHITE);
 8000218:	2201      	movs	r2, #1
 800021a:	4929      	ldr	r1, [pc, #164]	@ (80002c0 <main+0x174>)
 800021c:	4830      	ldr	r0, [pc, #192]	@ (80002e0 <main+0x194>)
 800021e:	f000 fb0d 	bl	800083c <SSD1306_Puts>

	  		SSD1306_UpdateScreen();
 8000222:	f000 f9d3 	bl	80005cc <SSD1306_UpdateScreen>
	  		HAL_Delay(10000);
 8000226:	f242 7010 	movw	r0, #10000	@ 0x2710
 800022a:	f001 f841 	bl	80012b0 <HAL_Delay>

	  		SSD1306_Clear();
 800022e:	f000 fe3e 	bl	8000eae <SSD1306_Clear>
	  		SSD1306_DrawRectangle(2, 2, 123, 60, WHITE);
 8000232:	2301      	movs	r3, #1
 8000234:	9300      	str	r3, [sp, #0]
 8000236:	233c      	movs	r3, #60	@ 0x3c
 8000238:	227b      	movs	r2, #123	@ 0x7b
 800023a:	2102      	movs	r1, #2
 800023c:	2002      	movs	r0, #2
 800023e:	f000 fc1d 	bl	8000a7c <SSD1306_DrawRectangle>
	  		SSD1306_GotoXY(10,10);
 8000242:	210a      	movs	r1, #10
 8000244:	200a      	movs	r0, #10
 8000246:	f000 fa65 	bl	8000714 <SSD1306_GotoXY>
	  		SSD1306_Puts("CONTADOR", &Font_7x10, WHITE);
 800024a:	2201      	movs	r2, #1
 800024c:	491c      	ldr	r1, [pc, #112]	@ (80002c0 <main+0x174>)
 800024e:	4825      	ldr	r0, [pc, #148]	@ (80002e4 <main+0x198>)
 8000250:	f000 faf4 	bl	800083c <SSD1306_Puts>
	  		SSD1306_DrawCircle(95, 35, 16, WHITE);
 8000254:	2301      	movs	r3, #1
 8000256:	2210      	movs	r2, #16
 8000258:	2123      	movs	r1, #35	@ 0x23
 800025a:	205f      	movs	r0, #95	@ 0x5f
 800025c:	f000 fc78 	bl	8000b50 <SSD1306_DrawCircle>
	  		SSD1306_UpdateScreen();
 8000260:	f000 f9b4 	bl	80005cc <SSD1306_UpdateScreen>

	  		uint8_t contador = 0;
 8000264:	2300      	movs	r3, #0
 8000266:	71fb      	strb	r3, [r7, #7]
	  		while(contador <= 10)
 8000268:	e017      	b.n	800029a <main+0x14e>
	  		{
	  			SSD1306_GotoXY(30,30);
 800026a:	211e      	movs	r1, #30
 800026c:	201e      	movs	r0, #30
 800026e:	f000 fa51 	bl	8000714 <SSD1306_GotoXY>
	  			sprintf(buf_oled, "%u ", contador);
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	461a      	mov	r2, r3
 8000276:	491c      	ldr	r1, [pc, #112]	@ (80002e8 <main+0x19c>)
 8000278:	481c      	ldr	r0, [pc, #112]	@ (80002ec <main+0x1a0>)
 800027a:	f002 fc6b 	bl	8002b54 <siprintf>
	  			SSD1306_Puts(buf_oled, &Font_11x18, WHITE);
 800027e:	2201      	movs	r2, #1
 8000280:	491b      	ldr	r1, [pc, #108]	@ (80002f0 <main+0x1a4>)
 8000282:	481a      	ldr	r0, [pc, #104]	@ (80002ec <main+0x1a0>)
 8000284:	f000 fada 	bl	800083c <SSD1306_Puts>
	  			SSD1306_UpdateScreen();
 8000288:	f000 f9a0 	bl	80005cc <SSD1306_UpdateScreen>
	  			contador++;
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	3301      	adds	r3, #1
 8000290:	71fb      	strb	r3, [r7, #7]
	  			HAL_Delay(400);
 8000292:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000296:	f001 f80b 	bl	80012b0 <HAL_Delay>
	  		while(contador <= 10)
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	2b0a      	cmp	r3, #10
 800029e:	d9e4      	bls.n	800026a <main+0x11e>
	  		}
	  		SSD1306_DrawFilledCircle(95, 35, 16, WHITE);
 80002a0:	2301      	movs	r3, #1
 80002a2:	2210      	movs	r2, #16
 80002a4:	2123      	movs	r1, #35	@ 0x23
 80002a6:	205f      	movs	r0, #95	@ 0x5f
 80002a8:	f000 fd26 	bl	8000cf8 <SSD1306_DrawFilledCircle>
	  		SSD1306_UpdateScreen();
 80002ac:	f000 f98e 	bl	80005cc <SSD1306_UpdateScreen>
	  		HAL_Delay(1000);
 80002b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b4:	f000 fffc 	bl	80012b0 <HAL_Delay>

	  		SSD1306_Clear();
 80002b8:	f000 fdf9 	bl	8000eae <SSD1306_Clear>
  {
 80002bc:	e75b      	b.n	8000176 <main+0x2a>
 80002be:	bf00      	nop
 80002c0:	20000000 	.word	0x20000000
 80002c4:	080034cc 	.word	0x080034cc
 80002c8:	080034e0 	.word	0x080034e0
 80002cc:	080034f0 	.word	0x080034f0
 80002d0:	080034fc 	.word	0x080034fc
 80002d4:	08003500 	.word	0x08003500
 80002d8:	0800350c 	.word	0x0800350c
 80002dc:	08003514 	.word	0x08003514
 80002e0:	0800351c 	.word	0x0800351c
 80002e4:	08003524 	.word	0x08003524
 80002e8:	08003530 	.word	0x08003530
 80002ec:	20000088 	.word	0x20000088
 80002f0:	20000008 	.word	0x20000008

080002f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b090      	sub	sp, #64	@ 0x40
 80002f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002fa:	f107 0318 	add.w	r3, r7, #24
 80002fe:	2228      	movs	r2, #40	@ 0x28
 8000300:	2100      	movs	r1, #0
 8000302:	4618      	mov	r0, r3
 8000304:	f002 fc46 	bl	8002b94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000308:	1d3b      	adds	r3, r7, #4
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
 8000314:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000316:	2301      	movs	r3, #1
 8000318:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800031a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800031e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000324:	2301      	movs	r3, #1
 8000326:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000328:	2302      	movs	r3, #2
 800032a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800032c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000330:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000332:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000338:	f107 0318 	add.w	r3, r7, #24
 800033c:	4618      	mov	r0, r3
 800033e:	f002 f80d 	bl	800235c <HAL_RCC_OscConfig>
 8000342:	4603      	mov	r3, r0
 8000344:	2b00      	cmp	r3, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000348:	f000 f876 	bl	8000438 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034c:	230f      	movs	r3, #15
 800034e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000350:	2302      	movs	r3, #2
 8000352:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000354:	2300      	movs	r3, #0
 8000356:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800035c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800035e:	2300      	movs	r3, #0
 8000360:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2102      	movs	r1, #2
 8000366:	4618      	mov	r0, r3
 8000368:	f002 fa7a 	bl	8002860 <HAL_RCC_ClockConfig>
 800036c:	4603      	mov	r3, r0
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000372:	f000 f861 	bl	8000438 <Error_Handler>
  }
}
 8000376:	bf00      	nop
 8000378:	3740      	adds	r7, #64	@ 0x40
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
	...

08000380 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000384:	4b12      	ldr	r3, [pc, #72]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000386:	4a13      	ldr	r2, [pc, #76]	@ (80003d4 <MX_I2C1_Init+0x54>)
 8000388:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800038a:	4b11      	ldr	r3, [pc, #68]	@ (80003d0 <MX_I2C1_Init+0x50>)
 800038c:	4a12      	ldr	r2, [pc, #72]	@ (80003d8 <MX_I2C1_Init+0x58>)
 800038e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000390:	4b0f      	ldr	r3, [pc, #60]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000396:	4b0e      	ldr	r3, [pc, #56]	@ (80003d0 <MX_I2C1_Init+0x50>)
 8000398:	2200      	movs	r2, #0
 800039a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039c:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <MX_I2C1_Init+0x50>)
 800039e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80003a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b0a      	ldr	r3, [pc, #40]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b09      	ldr	r3, [pc, #36]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b0:	4b07      	ldr	r3, [pc, #28]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003b6:	4b06      	ldr	r3, [pc, #24]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003bc:	4804      	ldr	r0, [pc, #16]	@ (80003d0 <MX_I2C1_Init+0x50>)
 80003be:	f001 fa03 	bl	80017c8 <HAL_I2C_Init>
 80003c2:	4603      	mov	r3, r0
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d001      	beq.n	80003cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003c8:	f000 f836 	bl	8000438 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003cc:	bf00      	nop
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	2000009c 	.word	0x2000009c
 80003d4:	40005400 	.word	0x40005400
 80003d8:	00061a80 	.word	0x00061a80

080003dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	b085      	sub	sp, #20
 80003e0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003e2:	4b14      	ldr	r3, [pc, #80]	@ (8000434 <MX_GPIO_Init+0x58>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a13      	ldr	r2, [pc, #76]	@ (8000434 <MX_GPIO_Init+0x58>)
 80003e8:	f043 0320 	orr.w	r3, r3, #32
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b11      	ldr	r3, [pc, #68]	@ (8000434 <MX_GPIO_Init+0x58>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0320 	and.w	r3, r3, #32
 80003f6:	60fb      	str	r3, [r7, #12]
 80003f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000434 <MX_GPIO_Init+0x58>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a0d      	ldr	r2, [pc, #52]	@ (8000434 <MX_GPIO_Init+0x58>)
 8000400:	f043 0304 	orr.w	r3, r3, #4
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b0b      	ldr	r3, [pc, #44]	@ (8000434 <MX_GPIO_Init+0x58>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0304 	and.w	r3, r3, #4
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000412:	4b08      	ldr	r3, [pc, #32]	@ (8000434 <MX_GPIO_Init+0x58>)
 8000414:	699b      	ldr	r3, [r3, #24]
 8000416:	4a07      	ldr	r2, [pc, #28]	@ (8000434 <MX_GPIO_Init+0x58>)
 8000418:	f043 0308 	orr.w	r3, r3, #8
 800041c:	6193      	str	r3, [r2, #24]
 800041e:	4b05      	ldr	r3, [pc, #20]	@ (8000434 <MX_GPIO_Init+0x58>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	f003 0308 	and.w	r3, r3, #8
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042a:	bf00      	nop
 800042c:	3714      	adds	r7, #20
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr
 8000434:	40021000 	.word	0x40021000

08000438 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043c:	b672      	cpsid	i
}
 800043e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <Error_Handler+0x8>

08000444 <SSD1306_Init>:
        }
    }
}

uint8_t SSD1306_Init(void)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
	SSD1306_I2C_Init();
 800044a:	f000 fd39 	bl	8000ec0 <SSD1306_I2C_Init>
	if(HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK){
 800044e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000452:	2201      	movs	r2, #1
 8000454:	2178      	movs	r1, #120	@ 0x78
 8000456:	485b      	ldr	r0, [pc, #364]	@ (80005c4 <SSD1306_Init+0x180>)
 8000458:	f001 fbf8 	bl	8001c4c <HAL_I2C_IsDeviceReady>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <SSD1306_Init+0x22>
		return 0;
 8000462:	2300      	movs	r3, #0
 8000464:	e0a9      	b.n	80005ba <SSD1306_Init+0x176>
	}

	uint32_t p = 2500;
 8000466:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800046a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800046c:	e002      	b.n	8000474 <SSD1306_Init+0x30>
		p--;
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	3b01      	subs	r3, #1
 8000472:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1f9      	bne.n	800046e <SSD1306_Init+0x2a>

	SSD1306_WRITECOMMAND(0xAE);
 800047a:	22ae      	movs	r2, #174	@ 0xae
 800047c:	2100      	movs	r1, #0
 800047e:	2078      	movs	r0, #120	@ 0x78
 8000480:	f000 fd98 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 8000484:	2220      	movs	r2, #32
 8000486:	2100      	movs	r1, #0
 8000488:	2078      	movs	r0, #120	@ 0x78
 800048a:	f000 fd93 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 800048e:	2210      	movs	r2, #16
 8000490:	2100      	movs	r1, #0
 8000492:	2078      	movs	r0, #120	@ 0x78
 8000494:	f000 fd8e 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0);
 8000498:	22b0      	movs	r2, #176	@ 0xb0
 800049a:	2100      	movs	r1, #0
 800049c:	2078      	movs	r0, #120	@ 0x78
 800049e:	f000 fd89 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8);
 80004a2:	22c8      	movs	r2, #200	@ 0xc8
 80004a4:	2100      	movs	r1, #0
 80004a6:	2078      	movs	r0, #120	@ 0x78
 80004a8:	f000 fd84 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 80004ac:	2200      	movs	r2, #0
 80004ae:	2100      	movs	r1, #0
 80004b0:	2078      	movs	r0, #120	@ 0x78
 80004b2:	f000 fd7f 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10);
 80004b6:	2210      	movs	r2, #16
 80004b8:	2100      	movs	r1, #0
 80004ba:	2078      	movs	r0, #120	@ 0x78
 80004bc:	f000 fd7a 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40);
 80004c0:	2240      	movs	r2, #64	@ 0x40
 80004c2:	2100      	movs	r1, #0
 80004c4:	2078      	movs	r0, #120	@ 0x78
 80004c6:	f000 fd75 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81);
 80004ca:	2281      	movs	r2, #129	@ 0x81
 80004cc:	2100      	movs	r1, #0
 80004ce:	2078      	movs	r0, #120	@ 0x78
 80004d0:	f000 fd70 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80004d4:	22ff      	movs	r2, #255	@ 0xff
 80004d6:	2100      	movs	r1, #0
 80004d8:	2078      	movs	r0, #120	@ 0x78
 80004da:	f000 fd6b 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1);
 80004de:	22a1      	movs	r2, #161	@ 0xa1
 80004e0:	2100      	movs	r1, #0
 80004e2:	2078      	movs	r0, #120	@ 0x78
 80004e4:	f000 fd66 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6);
 80004e8:	22a6      	movs	r2, #166	@ 0xa6
 80004ea:	2100      	movs	r1, #0
 80004ec:	2078      	movs	r0, #120	@ 0x78
 80004ee:	f000 fd61 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8);
 80004f2:	22a8      	movs	r2, #168	@ 0xa8
 80004f4:	2100      	movs	r1, #0
 80004f6:	2078      	movs	r0, #120	@ 0x78
 80004f8:	f000 fd5c 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F);
 80004fc:	223f      	movs	r2, #63	@ 0x3f
 80004fe:	2100      	movs	r1, #0
 8000500:	2078      	movs	r0, #120	@ 0x78
 8000502:	f000 fd57 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4);
 8000506:	22a4      	movs	r2, #164	@ 0xa4
 8000508:	2100      	movs	r1, #0
 800050a:	2078      	movs	r0, #120	@ 0x78
 800050c:	f000 fd52 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3);
 8000510:	22d3      	movs	r2, #211	@ 0xd3
 8000512:	2100      	movs	r1, #0
 8000514:	2078      	movs	r0, #120	@ 0x78
 8000516:	f000 fd4d 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	2078      	movs	r0, #120	@ 0x78
 8000520:	f000 fd48 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5);
 8000524:	22d5      	movs	r2, #213	@ 0xd5
 8000526:	2100      	movs	r1, #0
 8000528:	2078      	movs	r0, #120	@ 0x78
 800052a:	f000 fd43 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0);
 800052e:	22f0      	movs	r2, #240	@ 0xf0
 8000530:	2100      	movs	r1, #0
 8000532:	2078      	movs	r0, #120	@ 0x78
 8000534:	f000 fd3e 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9);
 8000538:	22d9      	movs	r2, #217	@ 0xd9
 800053a:	2100      	movs	r1, #0
 800053c:	2078      	movs	r0, #120	@ 0x78
 800053e:	f000 fd39 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22);
 8000542:	2222      	movs	r2, #34	@ 0x22
 8000544:	2100      	movs	r1, #0
 8000546:	2078      	movs	r0, #120	@ 0x78
 8000548:	f000 fd34 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA);
 800054c:	22da      	movs	r2, #218	@ 0xda
 800054e:	2100      	movs	r1, #0
 8000550:	2078      	movs	r0, #120	@ 0x78
 8000552:	f000 fd2f 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000556:	2212      	movs	r2, #18
 8000558:	2100      	movs	r1, #0
 800055a:	2078      	movs	r0, #120	@ 0x78
 800055c:	f000 fd2a 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB);
 8000560:	22db      	movs	r2, #219	@ 0xdb
 8000562:	2100      	movs	r1, #0
 8000564:	2078      	movs	r0, #120	@ 0x78
 8000566:	f000 fd25 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20);
 800056a:	2220      	movs	r2, #32
 800056c:	2100      	movs	r1, #0
 800056e:	2078      	movs	r0, #120	@ 0x78
 8000570:	f000 fd20 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D);
 8000574:	228d      	movs	r2, #141	@ 0x8d
 8000576:	2100      	movs	r1, #0
 8000578:	2078      	movs	r0, #120	@ 0x78
 800057a:	f000 fd1b 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14);
 800057e:	2214      	movs	r2, #20
 8000580:	2100      	movs	r1, #0
 8000582:	2078      	movs	r0, #120	@ 0x78
 8000584:	f000 fd16 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF);
 8000588:	22af      	movs	r2, #175	@ 0xaf
 800058a:	2100      	movs	r1, #0
 800058c:	2078      	movs	r0, #120	@ 0x78
 800058e:	f000 fd11 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000592:	222e      	movs	r2, #46	@ 0x2e
 8000594:	2100      	movs	r1, #0
 8000596:	2078      	movs	r0, #120	@ 0x78
 8000598:	f000 fd0c 	bl	8000fb4 <SSD1306_I2C_Write>
	SSD1306_Fill(BLACK);
 800059c:	2000      	movs	r0, #0
 800059e:	f000 f843 	bl	8000628 <SSD1306_Fill>
	SSD1306_UpdateScreen();
 80005a2:	f000 f813 	bl	80005cc <SSD1306_UpdateScreen>
	SSD1306.CurrentX = 0;
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <SSD1306_Init+0x184>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <SSD1306_Init+0x184>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	805a      	strh	r2, [r3, #2]
	SSD1306.Initialized = 1;
 80005b2:	4b05      	ldr	r3, [pc, #20]	@ (80005c8 <SSD1306_Init+0x184>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	715a      	strb	r2, [r3, #5]
	return 1;
 80005b8:	2301      	movs	r3, #1
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3708      	adds	r7, #8
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	2000009c 	.word	0x2000009c
 80005c8:	200004f0 	.word	0x200004f0

080005cc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
	uint8_t m;
	for(m=0; m<8; m++)
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	e01d      	b.n	8000614 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	3b50      	subs	r3, #80	@ 0x50
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	461a      	mov	r2, r3
 80005e0:	2100      	movs	r1, #0
 80005e2:	2078      	movs	r0, #120	@ 0x78
 80005e4:	f000 fce6 	bl	8000fb4 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	2078      	movs	r0, #120	@ 0x78
 80005ee:	f000 fce1 	bl	8000fb4 <SSD1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80005f2:	2210      	movs	r2, #16
 80005f4:	2100      	movs	r1, #0
 80005f6:	2078      	movs	r0, #120	@ 0x78
 80005f8:	f000 fcdc 	bl	8000fb4 <SSD1306_I2C_Write>
		SSD1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	01db      	lsls	r3, r3, #7
 8000600:	4a08      	ldr	r2, [pc, #32]	@ (8000624 <SSD1306_UpdateScreen+0x58>)
 8000602:	441a      	add	r2, r3
 8000604:	2380      	movs	r3, #128	@ 0x80
 8000606:	2140      	movs	r1, #64	@ 0x40
 8000608:	2078      	movs	r0, #120	@ 0x78
 800060a:	f000 fc6d 	bl	8000ee8 <SSD1306_I2C_WriteMulti>
	for(m=0; m<8; m++)
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	3301      	adds	r3, #1
 8000612:	71fb      	strb	r3, [r7, #7]
 8000614:	79fb      	ldrb	r3, [r7, #7]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d9de      	bls.n	80005d8 <SSD1306_UpdateScreen+0xc>
	}
}
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000f0 	.word	0x200000f0

08000628 <SSD1306_Fill>:
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	4603      	mov	r3, r0
 8000630:	71fb      	strb	r3, [r7, #7]
	memset(SSD1306_Buffer, (color == BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d101      	bne.n	800063c <SSD1306_Fill+0x14>
 8000638:	2300      	movs	r3, #0
 800063a:	e000      	b.n	800063e <SSD1306_Fill+0x16>
 800063c:	23ff      	movs	r3, #255	@ 0xff
 800063e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000642:	4619      	mov	r1, r3
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SSD1306_Fill+0x2c>)
 8000646:	f002 faa5 	bl	8002b94 <memset>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000f0 	.word	0x200000f0

08000658 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
 8000662:	460b      	mov	r3, r1
 8000664:	80bb      	strh	r3, [r7, #4]
 8000666:	4613      	mov	r3, r2
 8000668:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	2b7f      	cmp	r3, #127	@ 0x7f
 800066e:	d848      	bhi.n	8000702 <SSD1306_DrawPixel+0xaa>
 8000670:	88bb      	ldrh	r3, [r7, #4]
 8000672:	2b3f      	cmp	r3, #63	@ 0x3f
 8000674:	d845      	bhi.n	8000702 <SSD1306_DrawPixel+0xaa>
		return;
	}

	if(SSD1306.Inverted){
 8000676:	4b25      	ldr	r3, [pc, #148]	@ (800070c <SSD1306_DrawPixel+0xb4>)
 8000678:	791b      	ldrb	r3, [r3, #4]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d006      	beq.n	800068c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800067e:	78fb      	ldrb	r3, [r7, #3]
 8000680:	2b00      	cmp	r3, #0
 8000682:	bf0c      	ite	eq
 8000684:	2301      	moveq	r3, #1
 8000686:	2300      	movne	r3, #0
 8000688:	b2db      	uxtb	r3, r3
 800068a:	70fb      	strb	r3, [r7, #3]
	}

	if(color == WHITE){
 800068c:	78fb      	ldrb	r3, [r7, #3]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d11a      	bne.n	80006c8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000692:	88fa      	ldrh	r2, [r7, #6]
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	08db      	lsrs	r3, r3, #3
 8000698:	b298      	uxth	r0, r3
 800069a:	4603      	mov	r3, r0
 800069c:	01db      	lsls	r3, r3, #7
 800069e:	4413      	add	r3, r2
 80006a0:	4a1b      	ldr	r2, [pc, #108]	@ (8000710 <SSD1306_DrawPixel+0xb8>)
 80006a2:	5cd3      	ldrb	r3, [r2, r3]
 80006a4:	b25a      	sxtb	r2, r3
 80006a6:	88bb      	ldrh	r3, [r7, #4]
 80006a8:	f003 0307 	and.w	r3, r3, #7
 80006ac:	2101      	movs	r1, #1
 80006ae:	fa01 f303 	lsl.w	r3, r1, r3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	4313      	orrs	r3, r2
 80006b6:	b259      	sxtb	r1, r3
 80006b8:	88fa      	ldrh	r2, [r7, #6]
 80006ba:	4603      	mov	r3, r0
 80006bc:	01db      	lsls	r3, r3, #7
 80006be:	4413      	add	r3, r2
 80006c0:	b2c9      	uxtb	r1, r1
 80006c2:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <SSD1306_DrawPixel+0xb8>)
 80006c4:	54d1      	strb	r1, [r2, r3]
 80006c6:	e01d      	b.n	8000704 <SSD1306_DrawPixel+0xac>
	}else{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80006c8:	88fa      	ldrh	r2, [r7, #6]
 80006ca:	88bb      	ldrh	r3, [r7, #4]
 80006cc:	08db      	lsrs	r3, r3, #3
 80006ce:	b298      	uxth	r0, r3
 80006d0:	4603      	mov	r3, r0
 80006d2:	01db      	lsls	r3, r3, #7
 80006d4:	4413      	add	r3, r2
 80006d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <SSD1306_DrawPixel+0xb8>)
 80006d8:	5cd3      	ldrb	r3, [r2, r3]
 80006da:	b25a      	sxtb	r2, r3
 80006dc:	88bb      	ldrh	r3, [r7, #4]
 80006de:	f003 0307 	and.w	r3, r3, #7
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	43db      	mvns	r3, r3
 80006ec:	b25b      	sxtb	r3, r3
 80006ee:	4013      	ands	r3, r2
 80006f0:	b259      	sxtb	r1, r3
 80006f2:	88fa      	ldrh	r2, [r7, #6]
 80006f4:	4603      	mov	r3, r0
 80006f6:	01db      	lsls	r3, r3, #7
 80006f8:	4413      	add	r3, r2
 80006fa:	b2c9      	uxtb	r1, r1
 80006fc:	4a04      	ldr	r2, [pc, #16]	@ (8000710 <SSD1306_DrawPixel+0xb8>)
 80006fe:	54d1      	strb	r1, [r2, r3]
 8000700:	e000      	b.n	8000704 <SSD1306_DrawPixel+0xac>
		return;
 8000702:	bf00      	nop
	}
}
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	200004f0 	.word	0x200004f0
 8000710:	200000f0 	.word	0x200000f0

08000714 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	460a      	mov	r2, r1
 800071e:	80fb      	strh	r3, [r7, #6]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
	SSD1306.CurrentX = x;
 8000724:	4a05      	ldr	r2, [pc, #20]	@ (800073c <SSD1306_GotoXY+0x28>)
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800072a:	4a04      	ldr	r2, [pc, #16]	@ (800073c <SSD1306_GotoXY+0x28>)
 800072c:	88bb      	ldrh	r3, [r7, #4]
 800072e:	8053      	strh	r3, [r2, #2]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	bc80      	pop	{r7}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	200004f0 	.word	0x200004f0

08000740 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	4613      	mov	r3, r2
 800074e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	if(SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) || SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)){
 8000750:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <SSD1306_Putc+0xf8>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	4413      	add	r3, r2
 800075c:	2b7f      	cmp	r3, #127	@ 0x7f
 800075e:	dc07      	bgt.n	8000770 <SSD1306_Putc+0x30>
 8000760:	4b35      	ldr	r3, [pc, #212]	@ (8000838 <SSD1306_Putc+0xf8>)
 8000762:	885b      	ldrh	r3, [r3, #2]
 8000764:	461a      	mov	r2, r3
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	4413      	add	r3, r2
 800076c:	2b3f      	cmp	r3, #63	@ 0x3f
 800076e:	dd01      	ble.n	8000774 <SSD1306_Putc+0x34>
		return 0;
 8000770:	2300      	movs	r3, #0
 8000772:	e05d      	b.n	8000830 <SSD1306_Putc+0xf0>
	}

	for(i=0; i<Font->FontHeight; i++){
 8000774:	2300      	movs	r3, #0
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	e04b      	b.n	8000812 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	685a      	ldr	r2, [r3, #4]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	3b20      	subs	r3, #32
 8000782:	6839      	ldr	r1, [r7, #0]
 8000784:	7849      	ldrb	r1, [r1, #1]
 8000786:	fb01 f303 	mul.w	r3, r1, r3
 800078a:	4619      	mov	r1, r3
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	440b      	add	r3, r1
 8000790:	005b      	lsls	r3, r3, #1
 8000792:	4413      	add	r3, r2
 8000794:	881b      	ldrh	r3, [r3, #0]
 8000796:	60fb      	str	r3, [r7, #12]
		for(j=0; j<Font->FontWidth; j++){
 8000798:	2300      	movs	r3, #0
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	e030      	b.n	8000800 <SSD1306_Putc+0xc0>
			if((b << j) & 0x8000){
 800079e:	68fa      	ldr	r2, [r7, #12]
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d010      	beq.n	80007d0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80007ae:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <SSD1306_Putc+0xf8>)
 80007b0:	881a      	ldrh	r2, [r3, #0]
 80007b2:	693b      	ldr	r3, [r7, #16]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	4413      	add	r3, r2
 80007b8:	b298      	uxth	r0, r3
 80007ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000838 <SSD1306_Putc+0xf8>)
 80007bc:	885a      	ldrh	r2, [r3, #2]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	4413      	add	r3, r2
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	79ba      	ldrb	r2, [r7, #6]
 80007c8:	4619      	mov	r1, r3
 80007ca:	f7ff ff45 	bl	8000658 <SSD1306_DrawPixel>
 80007ce:	e014      	b.n	80007fa <SSD1306_Putc+0xba>
			}else{
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <SSD1306_Putc+0xf8>)
 80007d2:	881a      	ldrh	r2, [r3, #0]
 80007d4:	693b      	ldr	r3, [r7, #16]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	4413      	add	r3, r2
 80007da:	b298      	uxth	r0, r3
 80007dc:	4b16      	ldr	r3, [pc, #88]	@ (8000838 <SSD1306_Putc+0xf8>)
 80007de:	885a      	ldrh	r2, [r3, #2]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	b29b      	uxth	r3, r3
 80007e4:	4413      	add	r3, r2
 80007e6:	b299      	uxth	r1, r3
 80007e8:	79bb      	ldrb	r3, [r7, #6]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	bf0c      	ite	eq
 80007ee:	2301      	moveq	r3, #1
 80007f0:	2300      	movne	r3, #0
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	f7ff ff2f 	bl	8000658 <SSD1306_DrawPixel>
		for(j=0; j<Font->FontWidth; j++){
 80007fa:	693b      	ldr	r3, [r7, #16]
 80007fc:	3301      	adds	r3, #1
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	461a      	mov	r2, r3
 8000806:	693b      	ldr	r3, [r7, #16]
 8000808:	4293      	cmp	r3, r2
 800080a:	d3c8      	bcc.n	800079e <SSD1306_Putc+0x5e>
	for(i=0; i<Font->FontHeight; i++){
 800080c:	697b      	ldr	r3, [r7, #20]
 800080e:	3301      	adds	r3, #1
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	785b      	ldrb	r3, [r3, #1]
 8000816:	461a      	mov	r2, r3
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	4293      	cmp	r3, r2
 800081c:	d3ad      	bcc.n	800077a <SSD1306_Putc+0x3a>
			}
		}
	}
	SSD1306.CurrentX += Font->FontWidth;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <SSD1306_Putc+0xf8>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	683a      	ldr	r2, [r7, #0]
 8000824:	7812      	ldrb	r2, [r2, #0]
 8000826:	4413      	add	r3, r2
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b03      	ldr	r3, [pc, #12]	@ (8000838 <SSD1306_Putc+0xf8>)
 800082c:	801a      	strh	r2, [r3, #0]
	return ch;
 800082e:	79fb      	ldrb	r3, [r7, #7]
}
 8000830:	4618      	mov	r0, r3
 8000832:	3718      	adds	r7, #24
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200004f0 	.word	0x200004f0

0800083c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	60f8      	str	r0, [r7, #12]
 8000844:	60b9      	str	r1, [r7, #8]
 8000846:	4613      	mov	r3, r2
 8000848:	71fb      	strb	r3, [r7, #7]
	while(*str)
 800084a:	e012      	b.n	8000872 <SSD1306_Puts+0x36>
	{
		if(SSD1306_Putc(*str, Font, color) != *str){
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	79fa      	ldrb	r2, [r7, #7]
 8000852:	68b9      	ldr	r1, [r7, #8]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff73 	bl	8000740 <SSD1306_Putc>
 800085a:	4603      	mov	r3, r0
 800085c:	461a      	mov	r2, r3
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d002      	beq.n	800086c <SSD1306_Puts+0x30>
			return *str;
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	e008      	b.n	800087e <SSD1306_Puts+0x42>
		}
		str++;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	3301      	adds	r3, #1
 8000870:	60fb      	str	r3, [r7, #12]
	while(*str)
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1e8      	bne.n	800084c <SSD1306_Puts+0x10>
	}
	return *str;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	781b      	ldrb	r3, [r3, #0]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <SSD1306_DrawLine>:

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c)
{
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b087      	sub	sp, #28
 800088a:	af00      	add	r7, sp, #0
 800088c:	4604      	mov	r4, r0
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	461a      	mov	r2, r3
 8000894:	4623      	mov	r3, r4
 8000896:	80fb      	strh	r3, [r7, #6]
 8000898:	4603      	mov	r3, r0
 800089a:	80bb      	strh	r3, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp;

	if(x0 >= SSD1306_WIDTH){
 80008a4:	88fb      	ldrh	r3, [r7, #6]
 80008a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a8:	d901      	bls.n	80008ae <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80008aa:	237f      	movs	r3, #127	@ 0x7f
 80008ac:	80fb      	strh	r3, [r7, #6]
	}
	if(x1 >= SSD1306_WIDTH){
 80008ae:	887b      	ldrh	r3, [r7, #2]
 80008b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80008b2:	d901      	bls.n	80008b8 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80008b4:	237f      	movs	r3, #127	@ 0x7f
 80008b6:	807b      	strh	r3, [r7, #2]
	}
	if(y0 >= SSD1306_HEIGHT){
 80008b8:	88bb      	ldrh	r3, [r7, #4]
 80008ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80008bc:	d901      	bls.n	80008c2 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 80008be:	233f      	movs	r3, #63	@ 0x3f
 80008c0:	80bb      	strh	r3, [r7, #4]
	}
	if(y1 >= SSD1306_HEIGHT){
 80008c2:	883b      	ldrh	r3, [r7, #0]
 80008c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80008c6:	d901      	bls.n	80008cc <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80008c8:	233f      	movs	r3, #63	@ 0x3f
 80008ca:	803b      	strh	r3, [r7, #0]
	}
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1);
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	d205      	bcs.n	80008e0 <SSD1306_DrawLine+0x5a>
 80008d4:	887a      	ldrh	r2, [r7, #2]
 80008d6:	88fb      	ldrh	r3, [r7, #6]
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	b29b      	uxth	r3, r3
 80008dc:	b21b      	sxth	r3, r3
 80008de:	e004      	b.n	80008ea <SSD1306_DrawLine+0x64>
 80008e0:	88fa      	ldrh	r2, [r7, #6]
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	b29b      	uxth	r3, r3
 80008e8:	b21b      	sxth	r3, r3
 80008ea:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1);
 80008ec:	88ba      	ldrh	r2, [r7, #4]
 80008ee:	883b      	ldrh	r3, [r7, #0]
 80008f0:	429a      	cmp	r2, r3
 80008f2:	d205      	bcs.n	8000900 <SSD1306_DrawLine+0x7a>
 80008f4:	883a      	ldrh	r2, [r7, #0]
 80008f6:	88bb      	ldrh	r3, [r7, #4]
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	b21b      	sxth	r3, r3
 80008fe:	e004      	b.n	800090a <SSD1306_DrawLine+0x84>
 8000900:	88ba      	ldrh	r2, [r7, #4]
 8000902:	883b      	ldrh	r3, [r7, #0]
 8000904:	1ad3      	subs	r3, r2, r3
 8000906:	b29b      	uxth	r3, r3
 8000908:	b21b      	sxth	r3, r3
 800090a:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1;
 800090c:	88fa      	ldrh	r2, [r7, #6]
 800090e:	887b      	ldrh	r3, [r7, #2]
 8000910:	429a      	cmp	r2, r3
 8000912:	d201      	bcs.n	8000918 <SSD1306_DrawLine+0x92>
 8000914:	2301      	movs	r3, #1
 8000916:	e001      	b.n	800091c <SSD1306_DrawLine+0x96>
 8000918:	f04f 33ff 	mov.w	r3, #4294967295
 800091c:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1;
 800091e:	88ba      	ldrh	r2, [r7, #4]
 8000920:	883b      	ldrh	r3, [r7, #0]
 8000922:	429a      	cmp	r2, r3
 8000924:	d201      	bcs.n	800092a <SSD1306_DrawLine+0xa4>
 8000926:	2301      	movs	r3, #1
 8000928:	e001      	b.n	800092e <SSD1306_DrawLine+0xa8>
 800092a:	f04f 33ff 	mov.w	r3, #4294967295
 800092e:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2;
 8000930:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000934:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000938:	429a      	cmp	r2, r3
 800093a:	dd06      	ble.n	800094a <SSD1306_DrawLine+0xc4>
 800093c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000940:	0fda      	lsrs	r2, r3, #31
 8000942:	4413      	add	r3, r2
 8000944:	105b      	asrs	r3, r3, #1
 8000946:	b21b      	sxth	r3, r3
 8000948:	e006      	b.n	8000958 <SSD1306_DrawLine+0xd2>
 800094a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800094e:	0fda      	lsrs	r2, r3, #31
 8000950:	4413      	add	r3, r2
 8000952:	105b      	asrs	r3, r3, #1
 8000954:	425b      	negs	r3, r3
 8000956:	b21b      	sxth	r3, r3
 8000958:	82fb      	strh	r3, [r7, #22]

	if(dx == 0){
 800095a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d129      	bne.n	80009b6 <SSD1306_DrawLine+0x130>
		if(y1 < y0){
 8000962:	883a      	ldrh	r2, [r7, #0]
 8000964:	88bb      	ldrh	r3, [r7, #4]
 8000966:	429a      	cmp	r2, r3
 8000968:	d205      	bcs.n	8000976 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800096a:	883b      	ldrh	r3, [r7, #0]
 800096c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800096e:	88bb      	ldrh	r3, [r7, #4]
 8000970:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8000972:	893b      	ldrh	r3, [r7, #8]
 8000974:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 8000976:	887a      	ldrh	r2, [r7, #2]
 8000978:	88fb      	ldrh	r3, [r7, #6]
 800097a:	429a      	cmp	r2, r3
 800097c:	d205      	bcs.n	800098a <SSD1306_DrawLine+0x104>
			tmp = x1;
 800097e:	887b      	ldrh	r3, [r7, #2]
 8000980:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8000986:	893b      	ldrh	r3, [r7, #8]
 8000988:	80fb      	strh	r3, [r7, #6]
		}
		for(i=y0; i<=y1; i++){
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	82bb      	strh	r3, [r7, #20]
 800098e:	e00c      	b.n	80009aa <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8000990:	8ab9      	ldrh	r1, [r7, #20]
 8000992:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	4618      	mov	r0, r3
 800099a:	f7ff fe5d 	bl	8000658 <SSD1306_DrawPixel>
		for(i=y0; i<=y1; i++){
 800099e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	3301      	adds	r3, #1
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	82bb      	strh	r3, [r7, #20]
 80009aa:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80009ae:	883b      	ldrh	r3, [r7, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	dded      	ble.n	8000990 <SSD1306_DrawLine+0x10a>
		}
		return;
 80009b4:	e05f      	b.n	8000a76 <SSD1306_DrawLine+0x1f0>
	}

	if(dy == 0){
 80009b6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d129      	bne.n	8000a12 <SSD1306_DrawLine+0x18c>
		if(y1 < y0){
 80009be:	883a      	ldrh	r2, [r7, #0]
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d205      	bcs.n	80009d2 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 80009c6:	883b      	ldrh	r3, [r7, #0]
 80009c8:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80009ca:	88bb      	ldrh	r3, [r7, #4]
 80009cc:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80009ce:	893b      	ldrh	r3, [r7, #8]
 80009d0:	80bb      	strh	r3, [r7, #4]
		}
		if(x1 < x0){
 80009d2:	887a      	ldrh	r2, [r7, #2]
 80009d4:	88fb      	ldrh	r3, [r7, #6]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d205      	bcs.n	80009e6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 80009da:	887b      	ldrh	r3, [r7, #2]
 80009dc:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80009de:	88fb      	ldrh	r3, [r7, #6]
 80009e0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80009e2:	893b      	ldrh	r3, [r7, #8]
 80009e4:	80fb      	strh	r3, [r7, #6]
		}
		for(i = x0; i <= x1; i++){
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	82bb      	strh	r3, [r7, #20]
 80009ea:	e00c      	b.n	8000a06 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80009ec:	8abb      	ldrh	r3, [r7, #20]
 80009ee:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80009f2:	88b9      	ldrh	r1, [r7, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fe2f 	bl	8000658 <SSD1306_DrawPixel>
		for(i = x0; i <= x1; i++){
 80009fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	3301      	adds	r3, #1
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	82bb      	strh	r3, [r7, #20]
 8000a06:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8000a0a:	887b      	ldrh	r3, [r7, #2]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dded      	ble.n	80009ec <SSD1306_DrawLine+0x166>
		}
		return;
 8000a10:	e031      	b.n	8000a76 <SSD1306_DrawLine+0x1f0>
	}

	while(1)
	{
		SSD1306_DrawPixel(x0, y0, c);
 8000a12:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000a16:	88b9      	ldrh	r1, [r7, #4]
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f7ff fe1c 	bl	8000658 <SSD1306_DrawPixel>
		if(x0 == x1 && y0 == y1){
 8000a20:	88fa      	ldrh	r2, [r7, #6]
 8000a22:	887b      	ldrh	r3, [r7, #2]
 8000a24:	429a      	cmp	r2, r3
 8000a26:	d103      	bne.n	8000a30 <SSD1306_DrawLine+0x1aa>
 8000a28:	88ba      	ldrh	r2, [r7, #4]
 8000a2a:	883b      	ldrh	r3, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d021      	beq.n	8000a74 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err;
 8000a30:	8afb      	ldrh	r3, [r7, #22]
 8000a32:	817b      	strh	r3, [r7, #10]
		if(e2 > -dx){
 8000a34:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000a3c:	425b      	negs	r3, r3
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	dd08      	ble.n	8000a54 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8000a42:	8afa      	ldrh	r2, [r7, #22]
 8000a44:	8a3b      	ldrh	r3, [r7, #16]
 8000a46:	1ad3      	subs	r3, r2, r3
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8000a4c:	89fa      	ldrh	r2, [r7, #14]
 8000a4e:	88fb      	ldrh	r3, [r7, #6]
 8000a50:	4413      	add	r3, r2
 8000a52:	80fb      	strh	r3, [r7, #6]
		}
		if(e2 < dy){
 8000a54:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000a58:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	dad8      	bge.n	8000a12 <SSD1306_DrawLine+0x18c>
			err += dx;
 8000a60:	8afa      	ldrh	r2, [r7, #22]
 8000a62:	8a7b      	ldrh	r3, [r7, #18]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8000a6a:	89ba      	ldrh	r2, [r7, #12]
 8000a6c:	88bb      	ldrh	r3, [r7, #4]
 8000a6e:	4413      	add	r3, r2
 8000a70:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8000a72:	e7ce      	b.n	8000a12 <SSD1306_DrawLine+0x18c>
			break;
 8000a74:	bf00      	nop
		}
	}
}
 8000a76:	371c      	adds	r7, #28
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd90      	pop	{r4, r7, pc}

08000a7c <SSD1306_DrawRectangle>:

void SSD1306_DrawRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c)
{
 8000a7c:	b590      	push	{r4, r7, lr}
 8000a7e:	b085      	sub	sp, #20
 8000a80:	af02      	add	r7, sp, #8
 8000a82:	4604      	mov	r4, r0
 8000a84:	4608      	mov	r0, r1
 8000a86:	4611      	mov	r1, r2
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	460b      	mov	r3, r1
 8000a94:	807b      	strh	r3, [r7, #2]
 8000a96:	4613      	mov	r3, r2
 8000a98:	803b      	strh	r3, [r7, #0]
	if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT){
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a9e:	d853      	bhi.n	8000b48 <SSD1306_DrawRectangle+0xcc>
 8000aa0:	88bb      	ldrh	r3, [r7, #4]
 8000aa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aa4:	d850      	bhi.n	8000b48 <SSD1306_DrawRectangle+0xcc>
		return;
	}
	if((x + w) >= SSD1306_WIDTH){
 8000aa6:	88fa      	ldrh	r2, [r7, #6]
 8000aa8:	887b      	ldrh	r3, [r7, #2]
 8000aaa:	4413      	add	r3, r2
 8000aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8000aae:	dd03      	ble.n	8000ab8 <SSD1306_DrawRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8000ab6:	807b      	strh	r3, [r7, #2]
	}
	if((y + h) >= SSD1306_HEIGHT){
 8000ab8:	88ba      	ldrh	r2, [r7, #4]
 8000aba:	883b      	ldrh	r3, [r7, #0]
 8000abc:	4413      	add	r3, r2
 8000abe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ac0:	dd03      	ble.n	8000aca <SSD1306_DrawRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000ac8:	803b      	strh	r3, [r7, #0]
	}
	SSD1306_DrawLine(x, y, x + w, y, c);
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	88bc      	ldrh	r4, [r7, #4]
 8000ad4:	88b9      	ldrh	r1, [r7, #4]
 8000ad6:	88f8      	ldrh	r0, [r7, #6]
 8000ad8:	7e3b      	ldrb	r3, [r7, #24]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	4623      	mov	r3, r4
 8000ade:	f7ff fed2 	bl	8000886 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y + h, x + w, y + h, c);
 8000ae2:	88ba      	ldrh	r2, [r7, #4]
 8000ae4:	883b      	ldrh	r3, [r7, #0]
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b299      	uxth	r1, r3
 8000aea:	88fa      	ldrh	r2, [r7, #6]
 8000aec:	887b      	ldrh	r3, [r7, #2]
 8000aee:	4413      	add	r3, r2
 8000af0:	b29c      	uxth	r4, r3
 8000af2:	88ba      	ldrh	r2, [r7, #4]
 8000af4:	883b      	ldrh	r3, [r7, #0]
 8000af6:	4413      	add	r3, r2
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	88f8      	ldrh	r0, [r7, #6]
 8000afc:	7e3b      	ldrb	r3, [r7, #24]
 8000afe:	9300      	str	r3, [sp, #0]
 8000b00:	4613      	mov	r3, r2
 8000b02:	4622      	mov	r2, r4
 8000b04:	f7ff febf 	bl	8000886 <SSD1306_DrawLine>
	SSD1306_DrawLine(x, y, x, y + h, c);
 8000b08:	88ba      	ldrh	r2, [r7, #4]
 8000b0a:	883b      	ldrh	r3, [r7, #0]
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b29c      	uxth	r4, r3
 8000b10:	88fa      	ldrh	r2, [r7, #6]
 8000b12:	88b9      	ldrh	r1, [r7, #4]
 8000b14:	88f8      	ldrh	r0, [r7, #6]
 8000b16:	7e3b      	ldrb	r3, [r7, #24]
 8000b18:	9300      	str	r3, [sp, #0]
 8000b1a:	4623      	mov	r3, r4
 8000b1c:	f7ff feb3 	bl	8000886 <SSD1306_DrawLine>
	SSD1306_DrawLine(x + w, y, x + w, y + h, c);
 8000b20:	88fa      	ldrh	r2, [r7, #6]
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	4413      	add	r3, r2
 8000b26:	b298      	uxth	r0, r3
 8000b28:	88fa      	ldrh	r2, [r7, #6]
 8000b2a:	887b      	ldrh	r3, [r7, #2]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	b29c      	uxth	r4, r3
 8000b30:	88ba      	ldrh	r2, [r7, #4]
 8000b32:	883b      	ldrh	r3, [r7, #0]
 8000b34:	4413      	add	r3, r2
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	88b9      	ldrh	r1, [r7, #4]
 8000b3a:	7e3b      	ldrb	r3, [r7, #24]
 8000b3c:	9300      	str	r3, [sp, #0]
 8000b3e:	4613      	mov	r3, r2
 8000b40:	4622      	mov	r2, r4
 8000b42:	f7ff fea0 	bl	8000886 <SSD1306_DrawLine>
 8000b46:	e000      	b.n	8000b4a <SSD1306_DrawRectangle+0xce>
		return;
 8000b48:	bf00      	nop
}
 8000b4a:	370c      	adds	r7, #12
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}

08000b50 <SSD1306_DrawCircle>:
		y += yinc2;
	}
}

void SSD1306_DrawCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c)
{
 8000b50:	b590      	push	{r4, r7, lr}
 8000b52:	b087      	sub	sp, #28
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4604      	mov	r4, r0
 8000b58:	4608      	mov	r0, r1
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4623      	mov	r3, r4
 8000b60:	80fb      	strh	r3, [r7, #6]
 8000b62:	4603      	mov	r3, r0
 8000b64:	80bb      	strh	r3, [r7, #4]
 8000b66:	460b      	mov	r3, r1
 8000b68:	807b      	strh	r3, [r7, #2]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000b6e:	887b      	ldrh	r3, [r7, #2]
 8000b70:	f1c3 0301 	rsb	r3, r3, #1
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	03d2      	lsls	r2, r2, #15
 8000b82:	1ad3      	subs	r3, r2, r3
 8000b84:	005b      	lsls	r3, r3, #1
 8000b86:	b29b      	uxth	r3, r3
 8000b88:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000b8e:	887b      	ldrh	r3, [r7, #2]
 8000b90:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8000b92:	88f8      	ldrh	r0, [r7, #6]
 8000b94:	88ba      	ldrh	r2, [r7, #4]
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	4413      	add	r3, r2
 8000b9a:	b29b      	uxth	r3, r3
 8000b9c:	787a      	ldrb	r2, [r7, #1]
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	f7ff fd5a 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8000ba4:	88f8      	ldrh	r0, [r7, #6]
 8000ba6:	88ba      	ldrh	r2, [r7, #4]
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	787a      	ldrb	r2, [r7, #1]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f7ff fd51 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8000bb6:	88fa      	ldrh	r2, [r7, #6]
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	4413      	add	r3, r2
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	88b9      	ldrh	r1, [r7, #4]
 8000bc0:	787a      	ldrb	r2, [r7, #1]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff fd48 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8000bc8:	88fa      	ldrh	r2, [r7, #6]
 8000bca:	887b      	ldrh	r3, [r7, #2]
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	88b9      	ldrh	r1, [r7, #4]
 8000bd2:	787a      	ldrb	r2, [r7, #1]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fd3f 	bl	8000658 <SSD1306_DrawPixel>

    while(x < y){
 8000bda:	e081      	b.n	8000ce0 <SSD1306_DrawCircle+0x190>
        if(f >= 0){
 8000bdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0e      	blt.n	8000c02 <SSD1306_DrawCircle+0xb2>
            y--;
 8000be4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000bf0:	8a7b      	ldrh	r3, [r7, #18]
 8000bf2:	3302      	adds	r3, #2
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000bf8:	8afa      	ldrh	r2, [r7, #22]
 8000bfa:	8a7b      	ldrh	r3, [r7, #18]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b29b      	uxth	r3, r3
 8000c00:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000c02:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	3301      	adds	r3, #1
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000c0e:	8abb      	ldrh	r3, [r7, #20]
 8000c10:	3302      	adds	r3, #2
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000c16:	8afa      	ldrh	r2, [r7, #22]
 8000c18:	8abb      	ldrh	r3, [r7, #20]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawPixel(x0 + x, y0 + y, c);
 8000c20:	88fa      	ldrh	r2, [r7, #6]
 8000c22:	8a3b      	ldrh	r3, [r7, #16]
 8000c24:	4413      	add	r3, r2
 8000c26:	b298      	uxth	r0, r3
 8000c28:	88ba      	ldrh	r2, [r7, #4]
 8000c2a:	89fb      	ldrh	r3, [r7, #14]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	787a      	ldrb	r2, [r7, #1]
 8000c32:	4619      	mov	r1, r3
 8000c34:	f7ff fd10 	bl	8000658 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 + y, c);
 8000c38:	88fa      	ldrh	r2, [r7, #6]
 8000c3a:	8a3b      	ldrh	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	b298      	uxth	r0, r3
 8000c40:	88ba      	ldrh	r2, [r7, #4]
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	4413      	add	r3, r2
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	787a      	ldrb	r2, [r7, #1]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	f7ff fd04 	bl	8000658 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + x, y0 - y, c);
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	8a3b      	ldrh	r3, [r7, #16]
 8000c54:	4413      	add	r3, r2
 8000c56:	b298      	uxth	r0, r3
 8000c58:	88ba      	ldrh	r2, [r7, #4]
 8000c5a:	89fb      	ldrh	r3, [r7, #14]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	787a      	ldrb	r2, [r7, #1]
 8000c62:	4619      	mov	r1, r3
 8000c64:	f7ff fcf8 	bl	8000658 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - x, y0 - y, c);
 8000c68:	88fa      	ldrh	r2, [r7, #6]
 8000c6a:	8a3b      	ldrh	r3, [r7, #16]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	b298      	uxth	r0, r3
 8000c70:	88ba      	ldrh	r2, [r7, #4]
 8000c72:	89fb      	ldrh	r3, [r7, #14]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	b29b      	uxth	r3, r3
 8000c78:	787a      	ldrb	r2, [r7, #1]
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	f7ff fcec 	bl	8000658 <SSD1306_DrawPixel>

        SSD1306_DrawPixel(x0 + y, y0 + x, c);
 8000c80:	88fa      	ldrh	r2, [r7, #6]
 8000c82:	89fb      	ldrh	r3, [r7, #14]
 8000c84:	4413      	add	r3, r2
 8000c86:	b298      	uxth	r0, r3
 8000c88:	88ba      	ldrh	r2, [r7, #4]
 8000c8a:	8a3b      	ldrh	r3, [r7, #16]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	787a      	ldrb	r2, [r7, #1]
 8000c92:	4619      	mov	r1, r3
 8000c94:	f7ff fce0 	bl	8000658 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 + x, c);
 8000c98:	88fa      	ldrh	r2, [r7, #6]
 8000c9a:	89fb      	ldrh	r3, [r7, #14]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	b298      	uxth	r0, r3
 8000ca0:	88ba      	ldrh	r2, [r7, #4]
 8000ca2:	8a3b      	ldrh	r3, [r7, #16]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	787a      	ldrb	r2, [r7, #1]
 8000caa:	4619      	mov	r1, r3
 8000cac:	f7ff fcd4 	bl	8000658 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
 8000cb0:	88fa      	ldrh	r2, [r7, #6]
 8000cb2:	89fb      	ldrh	r3, [r7, #14]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b298      	uxth	r0, r3
 8000cb8:	88ba      	ldrh	r2, [r7, #4]
 8000cba:	8a3b      	ldrh	r3, [r7, #16]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	787a      	ldrb	r2, [r7, #1]
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f7ff fcc8 	bl	8000658 <SSD1306_DrawPixel>
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
 8000cc8:	88fa      	ldrh	r2, [r7, #6]
 8000cca:	89fb      	ldrh	r3, [r7, #14]
 8000ccc:	1ad3      	subs	r3, r2, r3
 8000cce:	b298      	uxth	r0, r3
 8000cd0:	88ba      	ldrh	r2, [r7, #4]
 8000cd2:	8a3b      	ldrh	r3, [r7, #16]
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	787a      	ldrb	r2, [r7, #1]
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f7ff fcbc 	bl	8000658 <SSD1306_DrawPixel>
    while(x < y){
 8000ce0:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f6ff af77 	blt.w	8000bdc <SSD1306_DrawCircle+0x8c>
    }
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	371c      	adds	r7, #28
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd90      	pop	{r4, r7, pc}

08000cf8 <SSD1306_DrawFilledCircle>:

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c)
{
 8000cf8:	b590      	push	{r4, r7, lr}
 8000cfa:	b089      	sub	sp, #36	@ 0x24
 8000cfc:	af02      	add	r7, sp, #8
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4608      	mov	r0, r1
 8000d02:	4611      	mov	r1, r2
 8000d04:	461a      	mov	r2, r3
 8000d06:	4623      	mov	r3, r4
 8000d08:	80fb      	strh	r3, [r7, #6]
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80bb      	strh	r3, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	807b      	strh	r3, [r7, #2]
 8000d12:	4613      	mov	r3, r2
 8000d14:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8000d16:	887b      	ldrh	r3, [r7, #2]
 8000d18:	f1c3 0301 	rsb	r3, r3, #1
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8000d20:	2301      	movs	r3, #1
 8000d22:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	461a      	mov	r2, r3
 8000d28:	03d2      	lsls	r2, r2, #15
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8000d36:	887b      	ldrh	r3, [r7, #2]
 8000d38:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8000d3a:	88f8      	ldrh	r0, [r7, #6]
 8000d3c:	88ba      	ldrh	r2, [r7, #4]
 8000d3e:	887b      	ldrh	r3, [r7, #2]
 8000d40:	4413      	add	r3, r2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	787a      	ldrb	r2, [r7, #1]
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fc86 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8000d4c:	88f8      	ldrh	r0, [r7, #6]
 8000d4e:	88ba      	ldrh	r2, [r7, #4]
 8000d50:	887b      	ldrh	r3, [r7, #2]
 8000d52:	1ad3      	subs	r3, r2, r3
 8000d54:	b29b      	uxth	r3, r3
 8000d56:	787a      	ldrb	r2, [r7, #1]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f7ff fc7d 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8000d5e:	88fa      	ldrh	r2, [r7, #6]
 8000d60:	887b      	ldrh	r3, [r7, #2]
 8000d62:	4413      	add	r3, r2
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	88b9      	ldrh	r1, [r7, #4]
 8000d68:	787a      	ldrb	r2, [r7, #1]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc74 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8000d70:	88fa      	ldrh	r2, [r7, #6]
 8000d72:	887b      	ldrh	r3, [r7, #2]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	88b9      	ldrh	r1, [r7, #4]
 8000d7a:	787a      	ldrb	r2, [r7, #1]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f7ff fc6b 	bl	8000658 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8000d82:	88fa      	ldrh	r2, [r7, #6]
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	b298      	uxth	r0, r3
 8000d8a:	88b9      	ldrh	r1, [r7, #4]
 8000d8c:	88fa      	ldrh	r2, [r7, #6]
 8000d8e:	887b      	ldrh	r3, [r7, #2]
 8000d90:	4413      	add	r3, r2
 8000d92:	b29a      	uxth	r2, r3
 8000d94:	88bc      	ldrh	r4, [r7, #4]
 8000d96:	787b      	ldrb	r3, [r7, #1]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	f7ff fd73 	bl	8000886 <SSD1306_DrawLine>

    while(x < y){
 8000da0:	e079      	b.n	8000e96 <SSD1306_DrawFilledCircle+0x19e>
        if(f >= 0){
 8000da2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0e      	blt.n	8000dc8 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8000daa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	3b01      	subs	r3, #1
 8000db2:	b29b      	uxth	r3, r3
 8000db4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8000db6:	8a7b      	ldrh	r3, [r7, #18]
 8000db8:	3302      	adds	r3, #2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8000dbe:	8afa      	ldrh	r2, [r7, #22]
 8000dc0:	8a7b      	ldrh	r3, [r7, #18]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8000dc8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3301      	adds	r3, #1
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000dd4:	8abb      	ldrh	r3, [r7, #20]
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000ddc:	8afa      	ldrh	r2, [r7, #22]
 8000dde:	8abb      	ldrh	r3, [r7, #20]
 8000de0:	4413      	add	r3, r2
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8000de6:	88fa      	ldrh	r2, [r7, #6]
 8000de8:	8a3b      	ldrh	r3, [r7, #16]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	b298      	uxth	r0, r3
 8000dee:	88ba      	ldrh	r2, [r7, #4]
 8000df0:	89fb      	ldrh	r3, [r7, #14]
 8000df2:	4413      	add	r3, r2
 8000df4:	b299      	uxth	r1, r3
 8000df6:	88fa      	ldrh	r2, [r7, #6]
 8000df8:	8a3b      	ldrh	r3, [r7, #16]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	b29c      	uxth	r4, r3
 8000dfe:	88ba      	ldrh	r2, [r7, #4]
 8000e00:	89fb      	ldrh	r3, [r7, #14]
 8000e02:	4413      	add	r3, r2
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	787b      	ldrb	r3, [r7, #1]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	4622      	mov	r2, r4
 8000e0e:	f7ff fd3a 	bl	8000886 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	8a3b      	ldrh	r3, [r7, #16]
 8000e16:	4413      	add	r3, r2
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	88ba      	ldrh	r2, [r7, #4]
 8000e1c:	89fb      	ldrh	r3, [r7, #14]
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b299      	uxth	r1, r3
 8000e22:	88fa      	ldrh	r2, [r7, #6]
 8000e24:	8a3b      	ldrh	r3, [r7, #16]
 8000e26:	1ad3      	subs	r3, r2, r3
 8000e28:	b29c      	uxth	r4, r3
 8000e2a:	88ba      	ldrh	r2, [r7, #4]
 8000e2c:	89fb      	ldrh	r3, [r7, #14]
 8000e2e:	1ad3      	subs	r3, r2, r3
 8000e30:	b29a      	uxth	r2, r3
 8000e32:	787b      	ldrb	r3, [r7, #1]
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	4613      	mov	r3, r2
 8000e38:	4622      	mov	r2, r4
 8000e3a:	f7ff fd24 	bl	8000886 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8000e3e:	88fa      	ldrh	r2, [r7, #6]
 8000e40:	89fb      	ldrh	r3, [r7, #14]
 8000e42:	4413      	add	r3, r2
 8000e44:	b298      	uxth	r0, r3
 8000e46:	88ba      	ldrh	r2, [r7, #4]
 8000e48:	8a3b      	ldrh	r3, [r7, #16]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	b299      	uxth	r1, r3
 8000e4e:	88fa      	ldrh	r2, [r7, #6]
 8000e50:	89fb      	ldrh	r3, [r7, #14]
 8000e52:	1ad3      	subs	r3, r2, r3
 8000e54:	b29c      	uxth	r4, r3
 8000e56:	88ba      	ldrh	r2, [r7, #4]
 8000e58:	8a3b      	ldrh	r3, [r7, #16]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29a      	uxth	r2, r3
 8000e5e:	787b      	ldrb	r3, [r7, #1]
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	4613      	mov	r3, r2
 8000e64:	4622      	mov	r2, r4
 8000e66:	f7ff fd0e 	bl	8000886 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8000e6a:	88fa      	ldrh	r2, [r7, #6]
 8000e6c:	89fb      	ldrh	r3, [r7, #14]
 8000e6e:	4413      	add	r3, r2
 8000e70:	b298      	uxth	r0, r3
 8000e72:	88ba      	ldrh	r2, [r7, #4]
 8000e74:	8a3b      	ldrh	r3, [r7, #16]
 8000e76:	1ad3      	subs	r3, r2, r3
 8000e78:	b299      	uxth	r1, r3
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	89fb      	ldrh	r3, [r7, #14]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	b29c      	uxth	r4, r3
 8000e82:	88ba      	ldrh	r2, [r7, #4]
 8000e84:	8a3b      	ldrh	r3, [r7, #16]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	787b      	ldrb	r3, [r7, #1]
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	4613      	mov	r3, r2
 8000e90:	4622      	mov	r2, r4
 8000e92:	f7ff fcf8 	bl	8000886 <SSD1306_DrawLine>
    while(x < y){
 8000e96:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000e9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	f6ff af7f 	blt.w	8000da2 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8000ea4:	bf00      	nop
 8000ea6:	bf00      	nop
 8000ea8:	371c      	adds	r7, #28
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd90      	pop	{r4, r7, pc}

08000eae <SSD1306_Clear>:

void SSD1306_Clear(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fbb8 	bl	8000628 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000eb8:	f7ff fb88 	bl	80005cc <SSD1306_UpdateScreen>
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SSD1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0x10);
	SSD1306_WRITECOMMAND(0xAE);
}

void SSD1306_I2C_Init(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
	uint32_t p = 250000;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <SSD1306_I2C_Init+0x24>)
 8000ec8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000eca:	e002      	b.n	8000ed2 <SSD1306_I2C_Init+0x12>
		p--;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1f9      	bne.n	8000ecc <SSD1306_I2C_Init+0xc>
}
 8000ed8:	bf00      	nop
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	0003d090 	.word	0x0003d090

08000ee8 <SSD1306_I2C_WriteMulti>:

void SSD1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b0c7      	sub	sp, #284	@ 0x11c
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000ef6:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000efa:	600a      	str	r2, [r1, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f02:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f06:	4622      	mov	r2, r4
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f0e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000f12:	4602      	mov	r2, r0
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f1e:	460a      	mov	r2, r1
 8000f20:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000f22:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f2a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f2e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000f32:	7812      	ldrb	r2, [r2, #0]
 8000f34:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000f36:	2300      	movs	r3, #0
 8000f38:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000f3c:	e015      	b.n	8000f6a <SSD1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8000f3e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f42:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f46:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000f4a:	6812      	ldr	r2, [r2, #0]
 8000f4c:	441a      	add	r2, r3
 8000f4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f52:	3301      	adds	r3, #1
 8000f54:	7811      	ldrb	r1, [r2, #0]
 8000f56:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f5a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000f5e:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000f60:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f64:	3301      	adds	r3, #1
 8000f66:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000f6a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000f74:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000f78:	8812      	ldrh	r2, [r2, #0]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d8df      	bhi.n	8000f3e <SSD1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8000f7e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f82:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	b299      	uxth	r1, r3
 8000f8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000f8e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000f92:	881b      	ldrh	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	f107 020c 	add.w	r2, r7, #12
 8000f9c:	200a      	movs	r0, #10
 8000f9e:	9000      	str	r0, [sp, #0]
 8000fa0:	4803      	ldr	r0, [pc, #12]	@ (8000fb0 <SSD1306_I2C_WriteMulti+0xc8>)
 8000fa2:	f000 fd55 	bl	8001a50 <HAL_I2C_Master_Transmit>
}
 8000fa6:	bf00      	nop
 8000fa8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd90      	pop	{r4, r7, pc}
 8000fb0:	2000009c 	.word	0x2000009c

08000fb4 <SSD1306_I2C_Write>:


void SSD1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af02      	add	r7, sp, #8
 8000fba:	4603      	mov	r3, r0
 8000fbc:	71fb      	strb	r3, [r7, #7]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	71bb      	strb	r3, [r7, #6]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000fc6:	79bb      	ldrb	r3, [r7, #6]
 8000fc8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000fca:	797b      	ldrb	r3, [r7, #5]
 8000fcc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	b299      	uxth	r1, r3
 8000fd2:	f107 020c 	add.w	r2, r7, #12
 8000fd6:	230a      	movs	r3, #10
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2302      	movs	r3, #2
 8000fdc:	4803      	ldr	r0, [pc, #12]	@ (8000fec <SSD1306_I2C_Write+0x38>)
 8000fde:	f000 fd37 	bl	8001a50 <HAL_I2C_Master_Transmit>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000009c 	.word	0x2000009c

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a14      	ldr	r2, [pc, #80]	@ (800104c <HAL_MspInit+0x5c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <HAL_MspInit+0x5c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_MspInit+0x5c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b0c      	ldr	r3, [pc, #48]	@ (800104c <HAL_MspInit+0x5c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_MspInit+0x60>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4a04      	ldr	r2, [pc, #16]	@ (8001050 <HAL_MspInit+0x60>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000
 8001050:	40010000 	.word	0x40010000

08001054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a15      	ldr	r2, [pc, #84]	@ (80010c4 <HAL_I2C_MspInit+0x70>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d123      	bne.n	80010bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_I2C_MspInit+0x74>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a13      	ldr	r2, [pc, #76]	@ (80010c8 <HAL_I2C_MspInit+0x74>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_I2C_MspInit+0x74>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800108c:	23c0      	movs	r3, #192	@ 0xc0
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480b      	ldr	r0, [pc, #44]	@ (80010cc <HAL_I2C_MspInit+0x78>)
 80010a0:	f000 fa0e 	bl	80014c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <HAL_I2C_MspInit+0x74>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	4a07      	ldr	r2, [pc, #28]	@ (80010c8 <HAL_I2C_MspInit+0x74>)
 80010aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80010ae:	61d3      	str	r3, [r2, #28]
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <HAL_I2C_MspInit+0x74>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <NMI_Handler+0x4>

080010d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <HardFault_Handler+0x4>

080010e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <MemManage_Handler+0x4>

080010e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <BusFault_Handler+0x4>

080010f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <UsageFault_Handler+0x4>

080010f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr

08001104 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	bc80      	pop	{r7}
 800111a:	4770      	bx	lr

0800111c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001120:	f000 f8aa 	bl	8001278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	@ (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	@ (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	@ (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	@ (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f001 fd24 	bl	8002ba4 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	@ (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	@ (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20005000 	.word	0x20005000
 8001188:	00000400 	.word	0x00000400
 800118c:	200004f8 	.word	0x200004f8
 8001190:	20000648 	.word	0x20000648

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff fff8 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011a6:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a8:	4a0c      	ldr	r2, [pc, #48]	@ (80011dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a09      	ldr	r2, [pc, #36]	@ (80011e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011bc:	4c09      	ldr	r4, [pc, #36]	@ (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f001 fcf1 	bl	8002bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7fe ffbd 	bl	800014c <main>
  bx lr
 80011d2:	4770      	bx	lr
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011dc:	08004a64 	.word	0x08004a64
  ldr r2, =_sbss
 80011e0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011e4:	20000648 	.word	0x20000648

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>
	...

080011ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f0:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_Init+0x28>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a07      	ldr	r2, [pc, #28]	@ (8001214 <HAL_Init+0x28>)
 80011f6:	f043 0310 	orr.w	r3, r3, #16
 80011fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fc:	2003      	movs	r0, #3
 80011fe:	f000 f92b 	bl	8001458 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001202:	200f      	movs	r0, #15
 8001204:	f000 f808 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001208:	f7ff fef2 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001220:	4b12      	ldr	r3, [pc, #72]	@ (800126c <HAL_InitTick+0x54>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b12      	ldr	r3, [pc, #72]	@ (8001270 <HAL_InitTick+0x58>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001232:	fbb2 f3f3 	udiv	r3, r2, r3
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f935 	bl	80014a6 <HAL_SYSTICK_Config>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e00e      	b.n	8001264 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	d80a      	bhi.n	8001262 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800124c:	2200      	movs	r2, #0
 800124e:	6879      	ldr	r1, [r7, #4]
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f000 f90b 	bl	800146e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <HAL_InitTick+0x5c>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800125e:	2300      	movs	r3, #0
 8001260:	e000      	b.n	8001264 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000010 	.word	0x20000010
 8001270:	20000018 	.word	0x20000018
 8001274:	20000014 	.word	0x20000014

08001278 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <HAL_IncTick+0x1c>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	461a      	mov	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	@ (8001298 <HAL_IncTick+0x20>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4413      	add	r3, r2
 8001288:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <HAL_IncTick+0x20>)
 800128a:	6013      	str	r3, [r2, #0]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr
 8001294:	20000018 	.word	0x20000018
 8001298:	200004fc 	.word	0x200004fc

0800129c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b02      	ldr	r3, [pc, #8]	@ (80012ac <HAL_GetTick+0x10>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr
 80012ac:	200004fc 	.word	0x200004fc

080012b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff fff0 	bl	800129c <HAL_GetTick>
 80012bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012c8:	d005      	beq.n	80012d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ca:	4b0a      	ldr	r3, [pc, #40]	@ (80012f4 <HAL_Delay+0x44>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	461a      	mov	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4413      	add	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012d6:	bf00      	nop
 80012d8:	f7ff ffe0 	bl	800129c <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	68bb      	ldr	r3, [r7, #8]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	68fa      	ldr	r2, [r7, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d8f7      	bhi.n	80012d8 <HAL_Delay+0x28>
  {
  }
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3710      	adds	r7, #16
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000018 	.word	0x20000018

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001320:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001324:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	bc80      	pop	{r7}
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136c:	2b00      	cmp	r3, #0
 800136e:	db0a      	blt.n	8001386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	490c      	ldr	r1, [pc, #48]	@ (80013a8 <__NVIC_SetPriority+0x4c>)
 8001376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137a:	0112      	lsls	r2, r2, #4
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	440b      	add	r3, r1
 8001380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001384:	e00a      	b.n	800139c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	b2da      	uxtb	r2, r3
 800138a:	4908      	ldr	r1, [pc, #32]	@ (80013ac <__NVIC_SetPriority+0x50>)
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	3b04      	subs	r3, #4
 8001394:	0112      	lsls	r2, r2, #4
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	440b      	add	r3, r1
 800139a:	761a      	strb	r2, [r3, #24]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b089      	sub	sp, #36	@ 0x24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	f1c3 0307 	rsb	r3, r3, #7
 80013ca:	2b04      	cmp	r3, #4
 80013cc:	bf28      	it	cs
 80013ce:	2304      	movcs	r3, #4
 80013d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3304      	adds	r3, #4
 80013d6:	2b06      	cmp	r3, #6
 80013d8:	d902      	bls.n	80013e0 <NVIC_EncodePriority+0x30>
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3b03      	subs	r3, #3
 80013de:	e000      	b.n	80013e2 <NVIC_EncodePriority+0x32>
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43da      	mvns	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	401a      	ands	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f8:	f04f 31ff 	mov.w	r1, #4294967295
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001402:	43d9      	mvns	r1, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001408:	4313      	orrs	r3, r2
         );
}
 800140a:	4618      	mov	r0, r3
 800140c:	3724      	adds	r7, #36	@ 0x24
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3b01      	subs	r3, #1
 8001420:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001424:	d301      	bcc.n	800142a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001426:	2301      	movs	r3, #1
 8001428:	e00f      	b.n	800144a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <SysTick_Config+0x40>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001432:	210f      	movs	r1, #15
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f7ff ff90 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <SysTick_Config+0x40>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001442:	4b04      	ldr	r3, [pc, #16]	@ (8001454 <SysTick_Config+0x40>)
 8001444:	2207      	movs	r2, #7
 8001446:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	e000e010 	.word	0xe000e010

08001458 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001460:	6878      	ldr	r0, [r7, #4]
 8001462:	f7ff ff49 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 8001466:	bf00      	nop
 8001468:	3708      	adds	r7, #8
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146e:	b580      	push	{r7, lr}
 8001470:	b086      	sub	sp, #24
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	60b9      	str	r1, [r7, #8]
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001480:	f7ff ff5e 	bl	8001340 <__NVIC_GetPriorityGrouping>
 8001484:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	6978      	ldr	r0, [r7, #20]
 800148c:	f7ff ff90 	bl	80013b0 <NVIC_EncodePriority>
 8001490:	4602      	mov	r2, r0
 8001492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001496:	4611      	mov	r1, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ff5f 	bl	800135c <__NVIC_SetPriority>
}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b082      	sub	sp, #8
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff ffb0 	bl	8001414 <SysTick_Config>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b08b      	sub	sp, #44	@ 0x2c
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ce:	2300      	movs	r3, #0
 80014d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d2:	e169      	b.n	80017a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d4:	2201      	movs	r2, #1
 80014d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	69fa      	ldr	r2, [r7, #28]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e8:	69ba      	ldr	r2, [r7, #24]
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	f040 8158 	bne.w	80017a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001760 <HAL_GPIO_Init+0x2a0>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d05e      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 80014fc:	4a98      	ldr	r2, [pc, #608]	@ (8001760 <HAL_GPIO_Init+0x2a0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d875      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001502:	4a98      	ldr	r2, [pc, #608]	@ (8001764 <HAL_GPIO_Init+0x2a4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d058      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001508:	4a96      	ldr	r2, [pc, #600]	@ (8001764 <HAL_GPIO_Init+0x2a4>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d86f      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800150e:	4a96      	ldr	r2, [pc, #600]	@ (8001768 <HAL_GPIO_Init+0x2a8>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d052      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001514:	4a94      	ldr	r2, [pc, #592]	@ (8001768 <HAL_GPIO_Init+0x2a8>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d869      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800151a:	4a94      	ldr	r2, [pc, #592]	@ (800176c <HAL_GPIO_Init+0x2ac>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d04c      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 8001520:	4a92      	ldr	r2, [pc, #584]	@ (800176c <HAL_GPIO_Init+0x2ac>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d863      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001526:	4a92      	ldr	r2, [pc, #584]	@ (8001770 <HAL_GPIO_Init+0x2b0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d046      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
 800152c:	4a90      	ldr	r2, [pc, #576]	@ (8001770 <HAL_GPIO_Init+0x2b0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d85d      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d82a      	bhi.n	800158c <HAL_GPIO_Init+0xcc>
 8001536:	2b12      	cmp	r3, #18
 8001538:	d859      	bhi.n	80015ee <HAL_GPIO_Init+0x12e>
 800153a:	a201      	add	r2, pc, #4	@ (adr r2, 8001540 <HAL_GPIO_Init+0x80>)
 800153c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001540:	080015bb 	.word	0x080015bb
 8001544:	08001595 	.word	0x08001595
 8001548:	080015a7 	.word	0x080015a7
 800154c:	080015e9 	.word	0x080015e9
 8001550:	080015ef 	.word	0x080015ef
 8001554:	080015ef 	.word	0x080015ef
 8001558:	080015ef 	.word	0x080015ef
 800155c:	080015ef 	.word	0x080015ef
 8001560:	080015ef 	.word	0x080015ef
 8001564:	080015ef 	.word	0x080015ef
 8001568:	080015ef 	.word	0x080015ef
 800156c:	080015ef 	.word	0x080015ef
 8001570:	080015ef 	.word	0x080015ef
 8001574:	080015ef 	.word	0x080015ef
 8001578:	080015ef 	.word	0x080015ef
 800157c:	080015ef 	.word	0x080015ef
 8001580:	080015ef 	.word	0x080015ef
 8001584:	0800159d 	.word	0x0800159d
 8001588:	080015b1 	.word	0x080015b1
 800158c:	4a79      	ldr	r2, [pc, #484]	@ (8001774 <HAL_GPIO_Init+0x2b4>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d013      	beq.n	80015ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001592:	e02c      	b.n	80015ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	623b      	str	r3, [r7, #32]
          break;
 800159a:	e029      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	3304      	adds	r3, #4
 80015a2:	623b      	str	r3, [r7, #32]
          break;
 80015a4:	e024      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	3308      	adds	r3, #8
 80015ac:	623b      	str	r3, [r7, #32]
          break;
 80015ae:	e01f      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	330c      	adds	r3, #12
 80015b6:	623b      	str	r3, [r7, #32]
          break;
 80015b8:	e01a      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015c2:	2304      	movs	r3, #4
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e013      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d105      	bne.n	80015dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d0:	2308      	movs	r3, #8
 80015d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	611a      	str	r2, [r3, #16]
          break;
 80015da:	e009      	b.n	80015f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015dc:	2308      	movs	r3, #8
 80015de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69fa      	ldr	r2, [r7, #28]
 80015e4:	615a      	str	r2, [r3, #20]
          break;
 80015e6:	e003      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e8:	2300      	movs	r3, #0
 80015ea:	623b      	str	r3, [r7, #32]
          break;
 80015ec:	e000      	b.n	80015f0 <HAL_GPIO_Init+0x130>
          break;
 80015ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2bff      	cmp	r3, #255	@ 0xff
 80015f4:	d801      	bhi.n	80015fa <HAL_GPIO_Init+0x13a>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	e001      	b.n	80015fe <HAL_GPIO_Init+0x13e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	3304      	adds	r3, #4
 80015fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	@ 0xff
 8001604:	d802      	bhi.n	800160c <HAL_GPIO_Init+0x14c>
 8001606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	e002      	b.n	8001612 <HAL_GPIO_Init+0x152>
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	3b08      	subs	r3, #8
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	210f      	movs	r1, #15
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	fa01 f303 	lsl.w	r3, r1, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	6a39      	ldr	r1, [r7, #32]
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	fa01 f303 	lsl.w	r3, r1, r3
 800162c:	431a      	orrs	r2, r3
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	f000 80b1 	beq.w	80017a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001640:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <HAL_GPIO_Init+0x2b8>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a4c      	ldr	r2, [pc, #304]	@ (8001778 <HAL_GPIO_Init+0x2b8>)
 8001646:	f043 0301 	orr.w	r3, r3, #1
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b4a      	ldr	r3, [pc, #296]	@ (8001778 <HAL_GPIO_Init+0x2b8>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	60bb      	str	r3, [r7, #8]
 8001656:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001658:	4a48      	ldr	r2, [pc, #288]	@ (800177c <HAL_GPIO_Init+0x2bc>)
 800165a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001664:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a40      	ldr	r2, [pc, #256]	@ (8001780 <HAL_GPIO_Init+0x2c0>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d013      	beq.n	80016ac <HAL_GPIO_Init+0x1ec>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	4a3f      	ldr	r2, [pc, #252]	@ (8001784 <HAL_GPIO_Init+0x2c4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d00d      	beq.n	80016a8 <HAL_GPIO_Init+0x1e8>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a3e      	ldr	r2, [pc, #248]	@ (8001788 <HAL_GPIO_Init+0x2c8>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d007      	beq.n	80016a4 <HAL_GPIO_Init+0x1e4>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3d      	ldr	r2, [pc, #244]	@ (800178c <HAL_GPIO_Init+0x2cc>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d101      	bne.n	80016a0 <HAL_GPIO_Init+0x1e0>
 800169c:	2303      	movs	r3, #3
 800169e:	e006      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016a0:	2304      	movs	r3, #4
 80016a2:	e004      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e002      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016a8:	2301      	movs	r3, #1
 80016aa:	e000      	b.n	80016ae <HAL_GPIO_Init+0x1ee>
 80016ac:	2300      	movs	r3, #0
 80016ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80016b0:	f002 0203 	and.w	r2, r2, #3
 80016b4:	0092      	lsls	r2, r2, #2
 80016b6:	4093      	lsls	r3, r2
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016be:	492f      	ldr	r1, [pc, #188]	@ (800177c <HAL_GPIO_Init+0x2bc>)
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	68fa      	ldr	r2, [r7, #12]
 80016c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d006      	beq.n	80016e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	492c      	ldr	r1, [pc, #176]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
 80016e4:	e006      	b.n	80016f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	4928      	ldr	r1, [pc, #160]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001702:	68da      	ldr	r2, [r3, #12]
 8001704:	4922      	ldr	r1, [pc, #136]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800170e:	4b20      	ldr	r3, [pc, #128]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001710:	68da      	ldr	r2, [r3, #12]
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	43db      	mvns	r3, r3
 8001716:	491e      	ldr	r1, [pc, #120]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001718:	4013      	ands	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d006      	beq.n	8001736 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001728:	4b19      	ldr	r3, [pc, #100]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	4918      	ldr	r1, [pc, #96]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e006      	b.n	8001744 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001736:	4b16      	ldr	r3, [pc, #88]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	43db      	mvns	r3, r3
 800173e:	4914      	ldr	r1, [pc, #80]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001740:	4013      	ands	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800174c:	2b00      	cmp	r3, #0
 800174e:	d021      	beq.n	8001794 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	490e      	ldr	r1, [pc, #56]	@ (8001790 <HAL_GPIO_Init+0x2d0>)
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
 800175c:	e021      	b.n	80017a2 <HAL_GPIO_Init+0x2e2>
 800175e:	bf00      	nop
 8001760:	10320000 	.word	0x10320000
 8001764:	10310000 	.word	0x10310000
 8001768:	10220000 	.word	0x10220000
 800176c:	10210000 	.word	0x10210000
 8001770:	10120000 	.word	0x10120000
 8001774:	10110000 	.word	0x10110000
 8001778:	40021000 	.word	0x40021000
 800177c:	40010000 	.word	0x40010000
 8001780:	40010800 	.word	0x40010800
 8001784:	40010c00 	.word	0x40010c00
 8001788:	40011000 	.word	0x40011000
 800178c:	40011400 	.word	0x40011400
 8001790:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	43db      	mvns	r3, r3
 800179c:	4909      	ldr	r1, [pc, #36]	@ (80017c4 <HAL_GPIO_Init+0x304>)
 800179e:	4013      	ands	r3, r2
 80017a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a4:	3301      	adds	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ae:	fa22 f303 	lsr.w	r3, r2, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f ae8e 	bne.w	80014d4 <HAL_GPIO_Init+0x14>
  }
}
 80017b8:	bf00      	nop
 80017ba:	bf00      	nop
 80017bc:	372c      	adds	r7, #44	@ 0x2c
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	40010400 	.word	0x40010400

080017c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e12b      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d106      	bne.n	80017f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff fc30 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2224      	movs	r2, #36	@ 0x24
 80017f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800181a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800182a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800182c:	f001 f960 	bl	8002af0 <HAL_RCC_GetPCLK1Freq>
 8001830:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	4a81      	ldr	r2, [pc, #516]	@ (8001a3c <HAL_I2C_Init+0x274>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d807      	bhi.n	800184c <HAL_I2C_Init+0x84>
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a80      	ldr	r2, [pc, #512]	@ (8001a40 <HAL_I2C_Init+0x278>)
 8001840:	4293      	cmp	r3, r2
 8001842:	bf94      	ite	ls
 8001844:	2301      	movls	r3, #1
 8001846:	2300      	movhi	r3, #0
 8001848:	b2db      	uxtb	r3, r3
 800184a:	e006      	b.n	800185a <HAL_I2C_Init+0x92>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a44 <HAL_I2C_Init+0x27c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	bf94      	ite	ls
 8001854:	2301      	movls	r3, #1
 8001856:	2300      	movhi	r3, #0
 8001858:	b2db      	uxtb	r3, r3
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e0e7      	b.n	8001a32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	4a78      	ldr	r2, [pc, #480]	@ (8001a48 <HAL_I2C_Init+0x280>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	68ba      	ldr	r2, [r7, #8]
 800187e:	430a      	orrs	r2, r1
 8001880:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
 8001888:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	4a6a      	ldr	r2, [pc, #424]	@ (8001a3c <HAL_I2C_Init+0x274>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d802      	bhi.n	800189c <HAL_I2C_Init+0xd4>
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	3301      	adds	r3, #1
 800189a:	e009      	b.n	80018b0 <HAL_I2C_Init+0xe8>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	4a69      	ldr	r2, [pc, #420]	@ (8001a4c <HAL_I2C_Init+0x284>)
 80018a8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ac:	099b      	lsrs	r3, r3, #6
 80018ae:	3301      	adds	r3, #1
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	430b      	orrs	r3, r1
 80018b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	69db      	ldr	r3, [r3, #28]
 80018be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80018c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	495c      	ldr	r1, [pc, #368]	@ (8001a3c <HAL_I2C_Init+0x274>)
 80018cc:	428b      	cmp	r3, r1
 80018ce:	d819      	bhi.n	8001904 <HAL_I2C_Init+0x13c>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e59      	subs	r1, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	fbb1 f3f3 	udiv	r3, r1, r3
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80018e4:	400b      	ands	r3, r1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00a      	beq.n	8001900 <HAL_I2C_Init+0x138>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1e59      	subs	r1, r3, #1
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80018f8:	3301      	adds	r3, #1
 80018fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fe:	e051      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001900:	2304      	movs	r3, #4
 8001902:	e04f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d111      	bne.n	8001930 <HAL_I2C_Init+0x168>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	1e58      	subs	r0, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6859      	ldr	r1, [r3, #4]
 8001914:	460b      	mov	r3, r1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	440b      	add	r3, r1
 800191a:	fbb0 f3f3 	udiv	r3, r0, r3
 800191e:	3301      	adds	r3, #1
 8001920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	e012      	b.n	8001956 <HAL_I2C_Init+0x18e>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	1e58      	subs	r0, r3, #1
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6859      	ldr	r1, [r3, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	0099      	lsls	r1, r3, #2
 8001940:	440b      	add	r3, r1
 8001942:	fbb0 f3f3 	udiv	r3, r0, r3
 8001946:	3301      	adds	r3, #1
 8001948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800194c:	2b00      	cmp	r3, #0
 800194e:	bf0c      	ite	eq
 8001950:	2301      	moveq	r3, #1
 8001952:	2300      	movne	r3, #0
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_I2C_Init+0x196>
 800195a:	2301      	movs	r3, #1
 800195c:	e022      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10e      	bne.n	8001984 <HAL_I2C_Init+0x1bc>
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e58      	subs	r0, r3, #1
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6859      	ldr	r1, [r3, #4]
 800196e:	460b      	mov	r3, r1
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	440b      	add	r3, r1
 8001974:	fbb0 f3f3 	udiv	r3, r0, r3
 8001978:	3301      	adds	r3, #1
 800197a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800197e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001982:	e00f      	b.n	80019a4 <HAL_I2C_Init+0x1dc>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	1e58      	subs	r0, r3, #1
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	0099      	lsls	r1, r3, #2
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019a4:	6879      	ldr	r1, [r7, #4]
 80019a6:	6809      	ldr	r1, [r1, #0]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	69da      	ldr	r2, [r3, #28]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	431a      	orrs	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80019d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	6911      	ldr	r1, [r2, #16]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	68d2      	ldr	r2, [r2, #12]
 80019de:	4311      	orrs	r1, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	430b      	orrs	r3, r1
 80019e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695a      	ldr	r2, [r3, #20]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	430a      	orrs	r2, r1
 8001a02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2220      	movs	r2, #32
 8001a1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	000186a0 	.word	0x000186a0
 8001a40:	001e847f 	.word	0x001e847f
 8001a44:	003d08ff 	.word	0x003d08ff
 8001a48:	431bde83 	.word	0x431bde83
 8001a4c:	10624dd3 	.word	0x10624dd3

08001a50 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607a      	str	r2, [r7, #4]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	817b      	strh	r3, [r7, #10]
 8001a60:	4613      	mov	r3, r2
 8001a62:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff fc1a 	bl	800129c <HAL_GetTick>
 8001a68:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b20      	cmp	r3, #32
 8001a74:	f040 80e0 	bne.w	8001c38 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	9300      	str	r3, [sp, #0]
 8001a7c:	2319      	movs	r3, #25
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4970      	ldr	r1, [pc, #448]	@ (8001c44 <HAL_I2C_Master_Transmit+0x1f4>)
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 fa92 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e0d3      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d101      	bne.n	8001aa0 <HAL_I2C_Master_Transmit+0x50>
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	e0cc      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d007      	beq.n	8001ac6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0201 	orr.w	r2, r2, #1
 8001ac4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2221      	movs	r2, #33	@ 0x21
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	893a      	ldrh	r2, [r7, #8]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a50      	ldr	r2, [pc, #320]	@ (8001c48 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b06:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b08:	8979      	ldrh	r1, [r7, #10]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 f9ca 	bl	8001ea8 <I2C_MasterRequestWrite>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e08d      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b1e:	2300      	movs	r3, #0
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b34:	e066      	b.n	8001c04 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f000 fb50 	bl	80021e0 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00d      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	d107      	bne.n	8001b5e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e06b      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b66:	781a      	ldrb	r2, [r3, #0]
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b72:	1c5a      	adds	r2, r3, #1
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	d11b      	bne.n	8001bd8 <HAL_I2C_Master_Transmit+0x188>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d017      	beq.n	8001bd8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bac:	781a      	ldrb	r2, [r3, #0]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	6a39      	ldr	r1, [r7, #32]
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 fb47 	bl	8002270 <I2C_WaitOnBTFFlagUntilTimeout>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00d      	beq.n	8001c04 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bec:	2b04      	cmp	r3, #4
 8001bee:	d107      	bne.n	8001c00 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001bfe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e01a      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d194      	bne.n	8001b36 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	2220      	movs	r2, #32
 8001c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c34:	2300      	movs	r3, #0
 8001c36:	e000      	b.n	8001c3a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c38:	2302      	movs	r3, #2
  }
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	00100002 	.word	0x00100002
 8001c48:	ffff0000 	.word	0xffff0000

08001c4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001c5c:	f7ff fb1e 	bl	800129c <HAL_GetTick>
 8001c60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	f040 8111 	bne.w	8001e96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2319      	movs	r3, #25
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	4988      	ldr	r1, [pc, #544]	@ (8001ea0 <HAL_I2C_IsDeviceReady+0x254>)
 8001c7e:	68f8      	ldr	r0, [r7, #12]
 8001c80:	f000 f994 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e104      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <HAL_I2C_IsDeviceReady+0x50>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e0fd      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d007      	beq.n	8001cc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2224      	movs	r2, #36	@ 0x24
 8001cd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	4a70      	ldr	r2, [pc, #448]	@ (8001ea4 <HAL_I2C_IsDeviceReady+0x258>)
 8001ce4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f952 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00d      	beq.n	8001d2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d1c:	d103      	bne.n	8001d26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d24:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e0b6      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d2a:	897b      	ldrh	r3, [r7, #10]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff faaf 	bl	800129c <HAL_GetTick>
 8001d3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d64:	bf0c      	ite	eq
 8001d66:	2301      	moveq	r3, #1
 8001d68:	2300      	movne	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001d6e:	e025      	b.n	8001dbc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001d70:	f7ff fa94 	bl	800129c <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d302      	bcc.n	8001d86 <HAL_I2C_IsDeviceReady+0x13a>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d103      	bne.n	8001d8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	22a0      	movs	r2, #160	@ 0xa0
 8001d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	695b      	ldr	r3, [r3, #20]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	bf0c      	ite	eq
 8001d9c:	2301      	moveq	r3, #1
 8001d9e:	2300      	movne	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001db2:	bf0c      	ite	eq
 8001db4:	2301      	moveq	r3, #1
 8001db6:	2300      	movne	r3, #0
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2ba0      	cmp	r3, #160	@ 0xa0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_I2C_IsDeviceReady+0x188>
 8001dc8:	7dfb      	ldrb	r3, [r7, #23]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d102      	bne.n	8001dd4 <HAL_I2C_IsDeviceReady+0x188>
 8001dce:	7dbb      	ldrb	r3, [r7, #22]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0cd      	beq.n	8001d70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2220      	movs	r2, #32
 8001dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d129      	bne.n	8001e3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001df8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	695b      	ldr	r3, [r3, #20]
 8001e04:	613b      	str	r3, [r7, #16]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	2319      	movs	r3, #25
 8001e16:	2201      	movs	r2, #1
 8001e18:	4921      	ldr	r1, [pc, #132]	@ (8001ea0 <HAL_I2C_IsDeviceReady+0x254>)
 8001e1a:	68f8      	ldr	r0, [r7, #12]
 8001e1c:	f000 f8c6 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e036      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e02c      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	9300      	str	r3, [sp, #0]
 8001e5c:	2319      	movs	r3, #25
 8001e5e:	2201      	movs	r2, #1
 8001e60:	490f      	ldr	r1, [pc, #60]	@ (8001ea0 <HAL_I2C_IsDeviceReady+0x254>)
 8001e62:	68f8      	ldr	r0, [r7, #12]
 8001e64:	f000 f8a2 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e012      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	3301      	adds	r3, #1
 8001e76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	f4ff af32 	bcc.w	8001ce6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2220      	movs	r2, #32
 8001e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
  }
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	00100002 	.word	0x00100002
 8001ea4:	ffff0000 	.word	0xffff0000

08001ea8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af02      	add	r7, sp, #8
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	603b      	str	r3, [r7, #0]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ebc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d006      	beq.n	8001ed2 <I2C_MasterRequestWrite+0x2a>
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d003      	beq.n	8001ed2 <I2C_MasterRequestWrite+0x2a>
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001ed0:	d108      	bne.n	8001ee4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	e00b      	b.n	8001efc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d107      	bne.n	8001efc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001efa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 f84f 	bl	8001fac <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00d      	beq.n	8001f30 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f22:	d103      	bne.n	8001f2c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f2a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e035      	b.n	8001f9c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f38:	d108      	bne.n	8001f4c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f3a:	897b      	ldrh	r3, [r7, #10]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f48:	611a      	str	r2, [r3, #16]
 8001f4a:	e01b      	b.n	8001f84 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f4c:	897b      	ldrh	r3, [r7, #10]
 8001f4e:	11db      	asrs	r3, r3, #7
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 0306 	and.w	r3, r3, #6
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f063 030f 	orn	r3, r3, #15
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <I2C_MasterRequestWrite+0xfc>)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f898 	bl	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e010      	b.n	8001f9c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4907      	ldr	r1, [pc, #28]	@ (8001fa8 <I2C_MasterRequestWrite+0x100>)
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f888 	bl	80020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3718      	adds	r7, #24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	00010008 	.word	0x00010008
 8001fa8:	00010002 	.word	0x00010002

08001fac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	603b      	str	r3, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fbc:	e048      	b.n	8002050 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc4:	d044      	beq.n	8002050 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fc6:	f7ff f969 	bl	800129c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d302      	bcc.n	8001fdc <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d139      	bne.n	8002050 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	0c1b      	lsrs	r3, r3, #16
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d10d      	bne.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	43da      	mvns	r2, r3
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	bf0c      	ite	eq
 8001ff8:	2301      	moveq	r3, #1
 8001ffa:	2300      	movne	r3, #0
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
 8002000:	e00c      	b.n	800201c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	43da      	mvns	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4013      	ands	r3, r2
 800200e:	b29b      	uxth	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	bf0c      	ite	eq
 8002014:	2301      	moveq	r3, #1
 8002016:	2300      	movne	r3, #0
 8002018:	b2db      	uxtb	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	429a      	cmp	r2, r3
 8002020:	d116      	bne.n	8002050 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2220      	movs	r2, #32
 800202c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	f043 0220 	orr.w	r2, r3, #32
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e023      	b.n	8002098 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	0c1b      	lsrs	r3, r3, #16
 8002054:	b2db      	uxtb	r3, r3
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10d      	bne.n	8002076 <I2C_WaitOnFlagUntilTimeout+0xca>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	695b      	ldr	r3, [r3, #20]
 8002060:	43da      	mvns	r2, r3
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	4013      	ands	r3, r2
 8002066:	b29b      	uxth	r3, r3
 8002068:	2b00      	cmp	r3, #0
 800206a:	bf0c      	ite	eq
 800206c:	2301      	moveq	r3, #1
 800206e:	2300      	movne	r3, #0
 8002070:	b2db      	uxtb	r3, r3
 8002072:	461a      	mov	r2, r3
 8002074:	e00c      	b.n	8002090 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	43da      	mvns	r2, r3
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	4013      	ands	r3, r2
 8002082:	b29b      	uxth	r3, r3
 8002084:	2b00      	cmp	r3, #0
 8002086:	bf0c      	ite	eq
 8002088:	2301      	moveq	r3, #1
 800208a:	2300      	movne	r3, #0
 800208c:	b2db      	uxtb	r3, r3
 800208e:	461a      	mov	r2, r3
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	429a      	cmp	r2, r3
 8002094:	d093      	beq.n	8001fbe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002096:	2300      	movs	r3, #0
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ae:	e071      	b.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80020be:	d123      	bne.n	8002108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80020ce:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80020d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2220      	movs	r2, #32
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	f043 0204 	orr.w	r2, r3, #4
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e067      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210e:	d041      	beq.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002110:	f7ff f8c4 	bl	800129c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	d302      	bcc.n	8002126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d136      	bne.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d10c      	bne.n	800214a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	43da      	mvns	r2, r3
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4013      	ands	r3, r2
 800213c:	b29b      	uxth	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf14      	ite	ne
 8002142:	2301      	movne	r3, #1
 8002144:	2300      	moveq	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	e00b      	b.n	8002162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	699b      	ldr	r3, [r3, #24]
 8002150:	43da      	mvns	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	4013      	ands	r3, r2
 8002156:	b29b      	uxth	r3, r3
 8002158:	2b00      	cmp	r3, #0
 800215a:	bf14      	ite	ne
 800215c:	2301      	movne	r3, #1
 800215e:	2300      	moveq	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f043 0220 	orr.w	r2, r3, #32
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e021      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d10c      	bne.n	80021b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	43da      	mvns	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	4013      	ands	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	bf14      	ite	ne
 80021b0:	2301      	movne	r3, #1
 80021b2:	2300      	moveq	r3, #0
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	e00b      	b.n	80021d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	43da      	mvns	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	4013      	ands	r3, r2
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf14      	ite	ne
 80021ca:	2301      	movne	r3, #1
 80021cc:	2300      	moveq	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f47f af6d 	bne.w	80020b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ec:	e034      	b.n	8002258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ee:	68f8      	ldr	r0, [r7, #12]
 80021f0:	f000 f886 	bl	8002300 <I2C_IsAcknowledgeFailed>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e034      	b.n	8002268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002204:	d028      	beq.n	8002258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002206:	f7ff f849 	bl	800129c <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	429a      	cmp	r2, r3
 8002214:	d302      	bcc.n	800221c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d11d      	bne.n	8002258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002226:	2b80      	cmp	r3, #128	@ 0x80
 8002228:	d016      	beq.n	8002258 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e007      	b.n	8002268 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695b      	ldr	r3, [r3, #20]
 800225e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002262:	2b80      	cmp	r3, #128	@ 0x80
 8002264:	d1c3      	bne.n	80021ee <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3710      	adds	r7, #16
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800227c:	e034      	b.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f83e 	bl	8002300 <I2C_IsAcknowledgeFailed>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e034      	b.n	80022f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002294:	d028      	beq.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002296:	f7ff f801 	bl	800129c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d302      	bcc.n	80022ac <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11d      	bne.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d016      	beq.n	80022e8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d4:	f043 0220 	orr.w	r2, r3, #32
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e007      	b.n	80022f8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	f003 0304 	and.w	r3, r3, #4
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d1c3      	bne.n	800227e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3710      	adds	r7, #16
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002316:	d11b      	bne.n	8002350 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002320:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233c:	f043 0204 	orr.w	r2, r3, #4
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	bc80      	pop	{r7}
 800235a:	4770      	bx	lr

0800235c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d101      	bne.n	800236e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e272      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	f000 8087 	beq.w	800248a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800237c:	4b92      	ldr	r3, [pc, #584]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 030c 	and.w	r3, r3, #12
 8002384:	2b04      	cmp	r3, #4
 8002386:	d00c      	beq.n	80023a2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002388:	4b8f      	ldr	r3, [pc, #572]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f003 030c 	and.w	r3, r3, #12
 8002390:	2b08      	cmp	r3, #8
 8002392:	d112      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
 8002394:	4b8c      	ldr	r3, [pc, #560]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a0:	d10b      	bne.n	80023ba <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a2:	4b89      	ldr	r3, [pc, #548]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d06c      	beq.n	8002488 <HAL_RCC_OscConfig+0x12c>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d168      	bne.n	8002488 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e24c      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x76>
 80023c4:	4b80      	ldr	r3, [pc, #512]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7f      	ldr	r2, [pc, #508]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023ce:	6013      	str	r3, [r2, #0]
 80023d0:	e02e      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x98>
 80023da:	4b7b      	ldr	r3, [pc, #492]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a7a      	ldr	r2, [pc, #488]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	4b78      	ldr	r3, [pc, #480]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a77      	ldr	r2, [pc, #476]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	e01d      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0xbc>
 80023fe:	4b72      	ldr	r3, [pc, #456]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a71      	ldr	r2, [pc, #452]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002404:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b6f      	ldr	r3, [pc, #444]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0xd4>
 8002418:	4b6b      	ldr	r3, [pc, #428]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a6a      	ldr	r2, [pc, #424]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800241e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002422:	6013      	str	r3, [r2, #0]
 8002424:	4b68      	ldr	r3, [pc, #416]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a67      	ldr	r2, [pc, #412]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800242a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800242e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d013      	beq.n	8002460 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe ff30 	bl	800129c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe ff2c 	bl	800129c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	@ 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e200      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002452:	4b5d      	ldr	r3, [pc, #372]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0xe4>
 800245e:	e014      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002460:	f7fe ff1c 	bl	800129c <HAL_GetTick>
 8002464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002468:	f7fe ff18 	bl	800129c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b64      	cmp	r3, #100	@ 0x64
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e1ec      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800247a:	4b53      	ldr	r3, [pc, #332]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d1f0      	bne.n	8002468 <HAL_RCC_OscConfig+0x10c>
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d063      	beq.n	800255e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002496:	4b4c      	ldr	r3, [pc, #304]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024a2:	4b49      	ldr	r3, [pc, #292]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	2b08      	cmp	r3, #8
 80024ac:	d11c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
 80024ae:	4b46      	ldr	r3, [pc, #280]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	4b43      	ldr	r3, [pc, #268]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d001      	beq.n	80024d2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e1c0      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d2:	4b3d      	ldr	r3, [pc, #244]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	4939      	ldr	r1, [pc, #228]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024e6:	e03a      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d020      	beq.n	8002532 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f0:	4b36      	ldr	r3, [pc, #216]	@ (80025cc <HAL_RCC_OscConfig+0x270>)
 80024f2:	2201      	movs	r2, #1
 80024f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f6:	f7fe fed1 	bl	800129c <HAL_GetTick>
 80024fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	e008      	b.n	8002510 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024fe:	f7fe fecd 	bl	800129c <HAL_GetTick>
 8002502:	4602      	mov	r2, r0
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d901      	bls.n	8002510 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e1a1      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002510:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0f0      	beq.n	80024fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251c:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	4927      	ldr	r1, [pc, #156]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 800252c:	4313      	orrs	r3, r2
 800252e:	600b      	str	r3, [r1, #0]
 8002530:	e015      	b.n	800255e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002532:	4b26      	ldr	r3, [pc, #152]	@ (80025cc <HAL_RCC_OscConfig+0x270>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7fe feb0 	bl	800129c <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002540:	f7fe feac 	bl	800129c <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e180      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002552:	4b1d      	ldr	r3, [pc, #116]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d03a      	beq.n	80025e0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d019      	beq.n	80025a6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002572:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 8002574:	2201      	movs	r2, #1
 8002576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002578:	f7fe fe90 	bl	800129c <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	e008      	b.n	8002592 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002580:	f7fe fe8c 	bl	800129c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	2b02      	cmp	r3, #2
 800258c:	d901      	bls.n	8002592 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800258e:	2303      	movs	r3, #3
 8002590:	e160      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002592:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <HAL_RCC_OscConfig+0x26c>)
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	2b00      	cmp	r3, #0
 800259c:	d0f0      	beq.n	8002580 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800259e:	2001      	movs	r0, #1
 80025a0:	f000 faba 	bl	8002b18 <RCC_Delay>
 80025a4:	e01c      	b.n	80025e0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_RCC_OscConfig+0x274>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fe76 	bl	800129c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025b2:	e00f      	b.n	80025d4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b4:	f7fe fe72 	bl	800129c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d908      	bls.n	80025d4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e146      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	42420000 	.word	0x42420000
 80025d0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d4:	4b92      	ldr	r3, [pc, #584]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1e9      	bne.n	80025b4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0304 	and.w	r3, r3, #4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a6 	beq.w	800273a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ee:	2300      	movs	r3, #0
 80025f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025f2:	4b8b      	ldr	r3, [pc, #556]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10d      	bne.n	800261a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025fe:	4b88      	ldr	r3, [pc, #544]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	4a87      	ldr	r2, [pc, #540]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002608:	61d3      	str	r3, [r2, #28]
 800260a:	4b85      	ldr	r3, [pc, #532]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002616:	2301      	movs	r3, #1
 8002618:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261a:	4b82      	ldr	r3, [pc, #520]	@ (8002824 <HAL_RCC_OscConfig+0x4c8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002622:	2b00      	cmp	r3, #0
 8002624:	d118      	bne.n	8002658 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002626:	4b7f      	ldr	r3, [pc, #508]	@ (8002824 <HAL_RCC_OscConfig+0x4c8>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a7e      	ldr	r2, [pc, #504]	@ (8002824 <HAL_RCC_OscConfig+0x4c8>)
 800262c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002630:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002632:	f7fe fe33 	bl	800129c <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263a:	f7fe fe2f 	bl	800129c <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b64      	cmp	r3, #100	@ 0x64
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e103      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800264c:	4b75      	ldr	r3, [pc, #468]	@ (8002824 <HAL_RCC_OscConfig+0x4c8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d0f0      	beq.n	800263a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d106      	bne.n	800266e <HAL_RCC_OscConfig+0x312>
 8002660:	4b6f      	ldr	r3, [pc, #444]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4a6e      	ldr	r2, [pc, #440]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002666:	f043 0301 	orr.w	r3, r3, #1
 800266a:	6213      	str	r3, [r2, #32]
 800266c:	e02d      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0x334>
 8002676:	4b6a      	ldr	r3, [pc, #424]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	4a69      	ldr	r2, [pc, #420]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800267c:	f023 0301 	bic.w	r3, r3, #1
 8002680:	6213      	str	r3, [r2, #32]
 8002682:	4b67      	ldr	r3, [pc, #412]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	4a66      	ldr	r2, [pc, #408]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	f023 0304 	bic.w	r3, r3, #4
 800268c:	6213      	str	r3, [r2, #32]
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x356>
 8002698:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a60      	ldr	r2, [pc, #384]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6213      	str	r3, [r2, #32]
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x36e>
 80026b2:	4b5b      	ldr	r3, [pc, #364]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6213      	str	r3, [r2, #32]
 80026be:	4b58      	ldr	r3, [pc, #352]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	6a1b      	ldr	r3, [r3, #32]
 80026c2:	4a57      	ldr	r2, [pc, #348]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fde3 	bl	800129c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fddf 	bl	800129c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0b1      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b4b      	ldr	r3, [pc, #300]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x37e>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe fdcd 	bl	800129c <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe fdc9 	bl	800129c <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e09b      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b40      	ldr	r3, [pc, #256]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800271e:	6a1b      	ldr	r3, [r3, #32]
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b3c      	ldr	r3, [pc, #240]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a3b      	ldr	r2, [pc, #236]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002738:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 8087 	beq.w	8002852 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d061      	beq.n	8002814 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d146      	bne.n	80027e6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b33      	ldr	r3, [pc, #204]	@ (8002828 <HAL_RCC_OscConfig+0x4cc>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe fd9d 	bl	800129c <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe fd99 	bl	800129c <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e06d      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002778:	4b29      	ldr	r3, [pc, #164]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800278e:	4b24      	ldr	r3, [pc, #144]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4921      	ldr	r1, [pc, #132]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027a0:	4b1f      	ldr	r3, [pc, #124]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a19      	ldr	r1, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	430b      	orrs	r3, r1
 80027b2:	491b      	ldr	r1, [pc, #108]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002828 <HAL_RCC_OscConfig+0x4cc>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fd6d 	bl	800129c <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c6:	f7fe fd69 	bl	800129c <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e03d      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027d8:	4b11      	ldr	r3, [pc, #68]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d0f0      	beq.n	80027c6 <HAL_RCC_OscConfig+0x46a>
 80027e4:	e035      	b.n	8002852 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027e6:	4b10      	ldr	r3, [pc, #64]	@ (8002828 <HAL_RCC_OscConfig+0x4cc>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ec:	f7fe fd56 	bl	800129c <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f4:	f7fe fd52 	bl	800129c <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e026      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002806:	4b06      	ldr	r3, [pc, #24]	@ (8002820 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x498>
 8002812:	e01e      	b.n	8002852 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d107      	bne.n	800282c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e019      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
 8002820:	40021000 	.word	0x40021000
 8002824:	40007000 	.word	0x40007000
 8002828:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800282c:	4b0b      	ldr	r3, [pc, #44]	@ (800285c <HAL_RCC_OscConfig+0x500>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
 800283c:	429a      	cmp	r2, r3
 800283e:	d106      	bne.n	800284e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800284a:	429a      	cmp	r2, r3
 800284c:	d001      	beq.n	8002852 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000

08002860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0d0      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002874:	4b6a      	ldr	r3, [pc, #424]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	429a      	cmp	r2, r3
 8002880:	d910      	bls.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002882:	4b67      	ldr	r3, [pc, #412]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f023 0207 	bic.w	r2, r3, #7
 800288a:	4965      	ldr	r1, [pc, #404]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	4313      	orrs	r3, r2
 8002890:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	4b63      	ldr	r3, [pc, #396]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d001      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0b8      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0302 	and.w	r3, r3, #2
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0304 	and.w	r3, r3, #4
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d005      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028bc:	4b59      	ldr	r3, [pc, #356]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	4a58      	ldr	r2, [pc, #352]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028c6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028d4:	4b53      	ldr	r3, [pc, #332]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4a52      	ldr	r2, [pc, #328]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028de:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028e0:	4b50      	ldr	r3, [pc, #320]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	494d      	ldr	r1, [pc, #308]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d040      	beq.n	8002980 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002906:	4b47      	ldr	r3, [pc, #284]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e07f      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	2b02      	cmp	r3, #2
 800291c:	d107      	bne.n	800292e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291e:	4b41      	ldr	r3, [pc, #260]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d109      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e073      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06b      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293e:	4b39      	ldr	r3, [pc, #228]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f023 0203 	bic.w	r2, r3, #3
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4936      	ldr	r1, [pc, #216]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002950:	f7fe fca4 	bl	800129c <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	e00a      	b.n	800296e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002958:	f7fe fca0 	bl	800129c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e053      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f003 020c 	and.w	r2, r3, #12
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	429a      	cmp	r2, r3
 800297e:	d1eb      	bne.n	8002958 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002980:	4b27      	ldr	r3, [pc, #156]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d210      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298e:	4b24      	ldr	r3, [pc, #144]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f023 0207 	bic.w	r2, r3, #7
 8002996:	4922      	ldr	r1, [pc, #136]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	4313      	orrs	r3, r2
 800299c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_RCC_ClockConfig+0x1c0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0307 	and.w	r3, r3, #7
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d001      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e032      	b.n	8002a16 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d008      	beq.n	80029ce <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029bc:	4b19      	ldr	r3, [pc, #100]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4916      	ldr	r1, [pc, #88]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0308 	and.w	r3, r3, #8
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029da:	4b12      	ldr	r3, [pc, #72]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	490e      	ldr	r1, [pc, #56]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029ee:	f000 f821 	bl	8002a34 <HAL_RCC_GetSysClockFreq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a24 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 030f 	and.w	r3, r3, #15
 80029fe:	490a      	ldr	r1, [pc, #40]	@ (8002a28 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	5ccb      	ldrb	r3, [r1, r3]
 8002a02:	fa22 f303 	lsr.w	r3, r2, r3
 8002a06:	4a09      	ldr	r2, [pc, #36]	@ (8002a2c <HAL_RCC_ClockConfig+0x1cc>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a0a:	4b09      	ldr	r3, [pc, #36]	@ (8002a30 <HAL_RCC_ClockConfig+0x1d0>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fe fc02 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40022000 	.word	0x40022000
 8002a24:	40021000 	.word	0x40021000
 8002a28:	080049fc 	.word	0x080049fc
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000014 	.word	0x20000014

08002a34 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	60bb      	str	r3, [r7, #8]
 8002a42:	2300      	movs	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d002      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x30>
 8002a5e:	2b08      	cmp	r3, #8
 8002a60:	d003      	beq.n	8002a6a <HAL_RCC_GetSysClockFreq+0x36>
 8002a62:	e027      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a64:	4b19      	ldr	r3, [pc, #100]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a66:	613b      	str	r3, [r7, #16]
      break;
 8002a68:	e027      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	0c9b      	lsrs	r3, r3, #18
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	4a17      	ldr	r2, [pc, #92]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a74:	5cd3      	ldrb	r3, [r2, r3]
 8002a76:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d010      	beq.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a82:	4b11      	ldr	r3, [pc, #68]	@ (8002ac8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	0c5b      	lsrs	r3, r3, #17
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	4a11      	ldr	r2, [pc, #68]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a8e:	5cd3      	ldrb	r3, [r2, r3]
 8002a90:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a0d      	ldr	r2, [pc, #52]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x98>)
 8002a96:	fb03 f202 	mul.w	r2, r3, r2
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e004      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a0c      	ldr	r2, [pc, #48]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002aa8:	fb02 f303 	mul.w	r3, r2, r3
 8002aac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	613b      	str	r3, [r7, #16]
      break;
 8002ab2:	e002      	b.n	8002aba <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <HAL_RCC_GetSysClockFreq+0x98>)
 8002ab6:	613b      	str	r3, [r7, #16]
      break;
 8002ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aba:	693b      	ldr	r3, [r7, #16]
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	371c      	adds	r7, #28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	007a1200 	.word	0x007a1200
 8002ad0:	08004a14 	.word	0x08004a14
 8002ad4:	08004a24 	.word	0x08004a24
 8002ad8:	003d0900 	.word	0x003d0900

08002adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ae0:	4b02      	ldr	r3, [pc, #8]	@ (8002aec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bc80      	pop	{r7}
 8002aea:	4770      	bx	lr
 8002aec:	20000010 	.word	0x20000010

08002af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002af4:	f7ff fff2 	bl	8002adc <HAL_RCC_GetHCLKFreq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4b05      	ldr	r3, [pc, #20]	@ (8002b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	0a1b      	lsrs	r3, r3, #8
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	4903      	ldr	r1, [pc, #12]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b06:	5ccb      	ldrb	r3, [r1, r3]
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08004a0c 	.word	0x08004a0c

08002b18 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b20:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <RCC_Delay+0x34>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <RCC_Delay+0x38>)
 8002b26:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2a:	0a5b      	lsrs	r3, r3, #9
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	fb02 f303 	mul.w	r3, r2, r3
 8002b32:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b34:	bf00      	nop
  }
  while (Delay --);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	60fa      	str	r2, [r7, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f9      	bne.n	8002b34 <RCC_Delay+0x1c>
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr
 8002b4c:	20000010 	.word	0x20000010
 8002b50:	10624dd3 	.word	0x10624dd3

08002b54 <siprintf>:
 8002b54:	b40e      	push	{r1, r2, r3}
 8002b56:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002b5a:	b500      	push	{lr}
 8002b5c:	b09c      	sub	sp, #112	@ 0x70
 8002b5e:	ab1d      	add	r3, sp, #116	@ 0x74
 8002b60:	9002      	str	r0, [sp, #8]
 8002b62:	9006      	str	r0, [sp, #24]
 8002b64:	9107      	str	r1, [sp, #28]
 8002b66:	9104      	str	r1, [sp, #16]
 8002b68:	4808      	ldr	r0, [pc, #32]	@ (8002b8c <siprintf+0x38>)
 8002b6a:	4909      	ldr	r1, [pc, #36]	@ (8002b90 <siprintf+0x3c>)
 8002b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b70:	9105      	str	r1, [sp, #20]
 8002b72:	6800      	ldr	r0, [r0, #0]
 8002b74:	a902      	add	r1, sp, #8
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	f000 f992 	bl	8002ea0 <_svfiprintf_r>
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	9b02      	ldr	r3, [sp, #8]
 8002b80:	701a      	strb	r2, [r3, #0]
 8002b82:	b01c      	add	sp, #112	@ 0x70
 8002b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b88:	b003      	add	sp, #12
 8002b8a:	4770      	bx	lr
 8002b8c:	2000001c 	.word	0x2000001c
 8002b90:	ffff0208 	.word	0xffff0208

08002b94 <memset>:
 8002b94:	4603      	mov	r3, r0
 8002b96:	4402      	add	r2, r0
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d100      	bne.n	8002b9e <memset+0xa>
 8002b9c:	4770      	bx	lr
 8002b9e:	f803 1b01 	strb.w	r1, [r3], #1
 8002ba2:	e7f9      	b.n	8002b98 <memset+0x4>

08002ba4 <__errno>:
 8002ba4:	4b01      	ldr	r3, [pc, #4]	@ (8002bac <__errno+0x8>)
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	2000001c 	.word	0x2000001c

08002bb0 <__libc_init_array>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	2600      	movs	r6, #0
 8002bb4:	4d0c      	ldr	r5, [pc, #48]	@ (8002be8 <__libc_init_array+0x38>)
 8002bb6:	4c0d      	ldr	r4, [pc, #52]	@ (8002bec <__libc_init_array+0x3c>)
 8002bb8:	1b64      	subs	r4, r4, r5
 8002bba:	10a4      	asrs	r4, r4, #2
 8002bbc:	42a6      	cmp	r6, r4
 8002bbe:	d109      	bne.n	8002bd4 <__libc_init_array+0x24>
 8002bc0:	f000 fc78 	bl	80034b4 <_init>
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	4d0a      	ldr	r5, [pc, #40]	@ (8002bf0 <__libc_init_array+0x40>)
 8002bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8002bf4 <__libc_init_array+0x44>)
 8002bca:	1b64      	subs	r4, r4, r5
 8002bcc:	10a4      	asrs	r4, r4, #2
 8002bce:	42a6      	cmp	r6, r4
 8002bd0:	d105      	bne.n	8002bde <__libc_init_array+0x2e>
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd8:	4798      	blx	r3
 8002bda:	3601      	adds	r6, #1
 8002bdc:	e7ee      	b.n	8002bbc <__libc_init_array+0xc>
 8002bde:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be2:	4798      	blx	r3
 8002be4:	3601      	adds	r6, #1
 8002be6:	e7f2      	b.n	8002bce <__libc_init_array+0x1e>
 8002be8:	08004a5c 	.word	0x08004a5c
 8002bec:	08004a5c 	.word	0x08004a5c
 8002bf0:	08004a5c 	.word	0x08004a5c
 8002bf4:	08004a60 	.word	0x08004a60

08002bf8 <__retarget_lock_acquire_recursive>:
 8002bf8:	4770      	bx	lr

08002bfa <__retarget_lock_release_recursive>:
 8002bfa:	4770      	bx	lr

08002bfc <_free_r>:
 8002bfc:	b538      	push	{r3, r4, r5, lr}
 8002bfe:	4605      	mov	r5, r0
 8002c00:	2900      	cmp	r1, #0
 8002c02:	d040      	beq.n	8002c86 <_free_r+0x8a>
 8002c04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c08:	1f0c      	subs	r4, r1, #4
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	bfb8      	it	lt
 8002c0e:	18e4      	addlt	r4, r4, r3
 8002c10:	f000 f8de 	bl	8002dd0 <__malloc_lock>
 8002c14:	4a1c      	ldr	r2, [pc, #112]	@ (8002c88 <_free_r+0x8c>)
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	b933      	cbnz	r3, 8002c28 <_free_r+0x2c>
 8002c1a:	6063      	str	r3, [r4, #4]
 8002c1c:	6014      	str	r4, [r2, #0]
 8002c1e:	4628      	mov	r0, r5
 8002c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c24:	f000 b8da 	b.w	8002ddc <__malloc_unlock>
 8002c28:	42a3      	cmp	r3, r4
 8002c2a:	d908      	bls.n	8002c3e <_free_r+0x42>
 8002c2c:	6820      	ldr	r0, [r4, #0]
 8002c2e:	1821      	adds	r1, r4, r0
 8002c30:	428b      	cmp	r3, r1
 8002c32:	bf01      	itttt	eq
 8002c34:	6819      	ldreq	r1, [r3, #0]
 8002c36:	685b      	ldreq	r3, [r3, #4]
 8002c38:	1809      	addeq	r1, r1, r0
 8002c3a:	6021      	streq	r1, [r4, #0]
 8002c3c:	e7ed      	b.n	8002c1a <_free_r+0x1e>
 8002c3e:	461a      	mov	r2, r3
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	b10b      	cbz	r3, 8002c48 <_free_r+0x4c>
 8002c44:	42a3      	cmp	r3, r4
 8002c46:	d9fa      	bls.n	8002c3e <_free_r+0x42>
 8002c48:	6811      	ldr	r1, [r2, #0]
 8002c4a:	1850      	adds	r0, r2, r1
 8002c4c:	42a0      	cmp	r0, r4
 8002c4e:	d10b      	bne.n	8002c68 <_free_r+0x6c>
 8002c50:	6820      	ldr	r0, [r4, #0]
 8002c52:	4401      	add	r1, r0
 8002c54:	1850      	adds	r0, r2, r1
 8002c56:	4283      	cmp	r3, r0
 8002c58:	6011      	str	r1, [r2, #0]
 8002c5a:	d1e0      	bne.n	8002c1e <_free_r+0x22>
 8002c5c:	6818      	ldr	r0, [r3, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4408      	add	r0, r1
 8002c62:	6010      	str	r0, [r2, #0]
 8002c64:	6053      	str	r3, [r2, #4]
 8002c66:	e7da      	b.n	8002c1e <_free_r+0x22>
 8002c68:	d902      	bls.n	8002c70 <_free_r+0x74>
 8002c6a:	230c      	movs	r3, #12
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	e7d6      	b.n	8002c1e <_free_r+0x22>
 8002c70:	6820      	ldr	r0, [r4, #0]
 8002c72:	1821      	adds	r1, r4, r0
 8002c74:	428b      	cmp	r3, r1
 8002c76:	bf01      	itttt	eq
 8002c78:	6819      	ldreq	r1, [r3, #0]
 8002c7a:	685b      	ldreq	r3, [r3, #4]
 8002c7c:	1809      	addeq	r1, r1, r0
 8002c7e:	6021      	streq	r1, [r4, #0]
 8002c80:	6063      	str	r3, [r4, #4]
 8002c82:	6054      	str	r4, [r2, #4]
 8002c84:	e7cb      	b.n	8002c1e <_free_r+0x22>
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	20000644 	.word	0x20000644

08002c8c <sbrk_aligned>:
 8002c8c:	b570      	push	{r4, r5, r6, lr}
 8002c8e:	4e0f      	ldr	r6, [pc, #60]	@ (8002ccc <sbrk_aligned+0x40>)
 8002c90:	460c      	mov	r4, r1
 8002c92:	6831      	ldr	r1, [r6, #0]
 8002c94:	4605      	mov	r5, r0
 8002c96:	b911      	cbnz	r1, 8002c9e <sbrk_aligned+0x12>
 8002c98:	f000 fbaa 	bl	80033f0 <_sbrk_r>
 8002c9c:	6030      	str	r0, [r6, #0]
 8002c9e:	4621      	mov	r1, r4
 8002ca0:	4628      	mov	r0, r5
 8002ca2:	f000 fba5 	bl	80033f0 <_sbrk_r>
 8002ca6:	1c43      	adds	r3, r0, #1
 8002ca8:	d103      	bne.n	8002cb2 <sbrk_aligned+0x26>
 8002caa:	f04f 34ff 	mov.w	r4, #4294967295
 8002cae:	4620      	mov	r0, r4
 8002cb0:	bd70      	pop	{r4, r5, r6, pc}
 8002cb2:	1cc4      	adds	r4, r0, #3
 8002cb4:	f024 0403 	bic.w	r4, r4, #3
 8002cb8:	42a0      	cmp	r0, r4
 8002cba:	d0f8      	beq.n	8002cae <sbrk_aligned+0x22>
 8002cbc:	1a21      	subs	r1, r4, r0
 8002cbe:	4628      	mov	r0, r5
 8002cc0:	f000 fb96 	bl	80033f0 <_sbrk_r>
 8002cc4:	3001      	adds	r0, #1
 8002cc6:	d1f2      	bne.n	8002cae <sbrk_aligned+0x22>
 8002cc8:	e7ef      	b.n	8002caa <sbrk_aligned+0x1e>
 8002cca:	bf00      	nop
 8002ccc:	20000640 	.word	0x20000640

08002cd0 <_malloc_r>:
 8002cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cd4:	1ccd      	adds	r5, r1, #3
 8002cd6:	f025 0503 	bic.w	r5, r5, #3
 8002cda:	3508      	adds	r5, #8
 8002cdc:	2d0c      	cmp	r5, #12
 8002cde:	bf38      	it	cc
 8002ce0:	250c      	movcc	r5, #12
 8002ce2:	2d00      	cmp	r5, #0
 8002ce4:	4606      	mov	r6, r0
 8002ce6:	db01      	blt.n	8002cec <_malloc_r+0x1c>
 8002ce8:	42a9      	cmp	r1, r5
 8002cea:	d904      	bls.n	8002cf6 <_malloc_r+0x26>
 8002cec:	230c      	movs	r3, #12
 8002cee:	6033      	str	r3, [r6, #0]
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002dcc <_malloc_r+0xfc>
 8002cfa:	f000 f869 	bl	8002dd0 <__malloc_lock>
 8002cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8002d02:	461c      	mov	r4, r3
 8002d04:	bb44      	cbnz	r4, 8002d58 <_malloc_r+0x88>
 8002d06:	4629      	mov	r1, r5
 8002d08:	4630      	mov	r0, r6
 8002d0a:	f7ff ffbf 	bl	8002c8c <sbrk_aligned>
 8002d0e:	1c43      	adds	r3, r0, #1
 8002d10:	4604      	mov	r4, r0
 8002d12:	d158      	bne.n	8002dc6 <_malloc_r+0xf6>
 8002d14:	f8d8 4000 	ldr.w	r4, [r8]
 8002d18:	4627      	mov	r7, r4
 8002d1a:	2f00      	cmp	r7, #0
 8002d1c:	d143      	bne.n	8002da6 <_malloc_r+0xd6>
 8002d1e:	2c00      	cmp	r4, #0
 8002d20:	d04b      	beq.n	8002dba <_malloc_r+0xea>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	4639      	mov	r1, r7
 8002d26:	4630      	mov	r0, r6
 8002d28:	eb04 0903 	add.w	r9, r4, r3
 8002d2c:	f000 fb60 	bl	80033f0 <_sbrk_r>
 8002d30:	4581      	cmp	r9, r0
 8002d32:	d142      	bne.n	8002dba <_malloc_r+0xea>
 8002d34:	6821      	ldr	r1, [r4, #0]
 8002d36:	4630      	mov	r0, r6
 8002d38:	1a6d      	subs	r5, r5, r1
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	f7ff ffa6 	bl	8002c8c <sbrk_aligned>
 8002d40:	3001      	adds	r0, #1
 8002d42:	d03a      	beq.n	8002dba <_malloc_r+0xea>
 8002d44:	6823      	ldr	r3, [r4, #0]
 8002d46:	442b      	add	r3, r5
 8002d48:	6023      	str	r3, [r4, #0]
 8002d4a:	f8d8 3000 	ldr.w	r3, [r8]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	bb62      	cbnz	r2, 8002dac <_malloc_r+0xdc>
 8002d52:	f8c8 7000 	str.w	r7, [r8]
 8002d56:	e00f      	b.n	8002d78 <_malloc_r+0xa8>
 8002d58:	6822      	ldr	r2, [r4, #0]
 8002d5a:	1b52      	subs	r2, r2, r5
 8002d5c:	d420      	bmi.n	8002da0 <_malloc_r+0xd0>
 8002d5e:	2a0b      	cmp	r2, #11
 8002d60:	d917      	bls.n	8002d92 <_malloc_r+0xc2>
 8002d62:	1961      	adds	r1, r4, r5
 8002d64:	42a3      	cmp	r3, r4
 8002d66:	6025      	str	r5, [r4, #0]
 8002d68:	bf18      	it	ne
 8002d6a:	6059      	strne	r1, [r3, #4]
 8002d6c:	6863      	ldr	r3, [r4, #4]
 8002d6e:	bf08      	it	eq
 8002d70:	f8c8 1000 	streq.w	r1, [r8]
 8002d74:	5162      	str	r2, [r4, r5]
 8002d76:	604b      	str	r3, [r1, #4]
 8002d78:	4630      	mov	r0, r6
 8002d7a:	f000 f82f 	bl	8002ddc <__malloc_unlock>
 8002d7e:	f104 000b 	add.w	r0, r4, #11
 8002d82:	1d23      	adds	r3, r4, #4
 8002d84:	f020 0007 	bic.w	r0, r0, #7
 8002d88:	1ac2      	subs	r2, r0, r3
 8002d8a:	bf1c      	itt	ne
 8002d8c:	1a1b      	subne	r3, r3, r0
 8002d8e:	50a3      	strne	r3, [r4, r2]
 8002d90:	e7af      	b.n	8002cf2 <_malloc_r+0x22>
 8002d92:	6862      	ldr	r2, [r4, #4]
 8002d94:	42a3      	cmp	r3, r4
 8002d96:	bf0c      	ite	eq
 8002d98:	f8c8 2000 	streq.w	r2, [r8]
 8002d9c:	605a      	strne	r2, [r3, #4]
 8002d9e:	e7eb      	b.n	8002d78 <_malloc_r+0xa8>
 8002da0:	4623      	mov	r3, r4
 8002da2:	6864      	ldr	r4, [r4, #4]
 8002da4:	e7ae      	b.n	8002d04 <_malloc_r+0x34>
 8002da6:	463c      	mov	r4, r7
 8002da8:	687f      	ldr	r7, [r7, #4]
 8002daa:	e7b6      	b.n	8002d1a <_malloc_r+0x4a>
 8002dac:	461a      	mov	r2, r3
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	42a3      	cmp	r3, r4
 8002db2:	d1fb      	bne.n	8002dac <_malloc_r+0xdc>
 8002db4:	2300      	movs	r3, #0
 8002db6:	6053      	str	r3, [r2, #4]
 8002db8:	e7de      	b.n	8002d78 <_malloc_r+0xa8>
 8002dba:	230c      	movs	r3, #12
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	6033      	str	r3, [r6, #0]
 8002dc0:	f000 f80c 	bl	8002ddc <__malloc_unlock>
 8002dc4:	e794      	b.n	8002cf0 <_malloc_r+0x20>
 8002dc6:	6005      	str	r5, [r0, #0]
 8002dc8:	e7d6      	b.n	8002d78 <_malloc_r+0xa8>
 8002dca:	bf00      	nop
 8002dcc:	20000644 	.word	0x20000644

08002dd0 <__malloc_lock>:
 8002dd0:	4801      	ldr	r0, [pc, #4]	@ (8002dd8 <__malloc_lock+0x8>)
 8002dd2:	f7ff bf11 	b.w	8002bf8 <__retarget_lock_acquire_recursive>
 8002dd6:	bf00      	nop
 8002dd8:	2000063c 	.word	0x2000063c

08002ddc <__malloc_unlock>:
 8002ddc:	4801      	ldr	r0, [pc, #4]	@ (8002de4 <__malloc_unlock+0x8>)
 8002dde:	f7ff bf0c 	b.w	8002bfa <__retarget_lock_release_recursive>
 8002de2:	bf00      	nop
 8002de4:	2000063c 	.word	0x2000063c

08002de8 <__ssputs_r>:
 8002de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002dec:	461f      	mov	r7, r3
 8002dee:	688e      	ldr	r6, [r1, #8]
 8002df0:	4682      	mov	sl, r0
 8002df2:	42be      	cmp	r6, r7
 8002df4:	460c      	mov	r4, r1
 8002df6:	4690      	mov	r8, r2
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	d82d      	bhi.n	8002e58 <__ssputs_r+0x70>
 8002dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002e04:	d026      	beq.n	8002e54 <__ssputs_r+0x6c>
 8002e06:	6965      	ldr	r5, [r4, #20]
 8002e08:	6909      	ldr	r1, [r1, #16]
 8002e0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002e0e:	eba3 0901 	sub.w	r9, r3, r1
 8002e12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002e16:	1c7b      	adds	r3, r7, #1
 8002e18:	444b      	add	r3, r9
 8002e1a:	106d      	asrs	r5, r5, #1
 8002e1c:	429d      	cmp	r5, r3
 8002e1e:	bf38      	it	cc
 8002e20:	461d      	movcc	r5, r3
 8002e22:	0553      	lsls	r3, r2, #21
 8002e24:	d527      	bpl.n	8002e76 <__ssputs_r+0x8e>
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7ff ff52 	bl	8002cd0 <_malloc_r>
 8002e2c:	4606      	mov	r6, r0
 8002e2e:	b360      	cbz	r0, 8002e8a <__ssputs_r+0xa2>
 8002e30:	464a      	mov	r2, r9
 8002e32:	6921      	ldr	r1, [r4, #16]
 8002e34:	f000 fafa 	bl	800342c <memcpy>
 8002e38:	89a3      	ldrh	r3, [r4, #12]
 8002e3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002e3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e42:	81a3      	strh	r3, [r4, #12]
 8002e44:	6126      	str	r6, [r4, #16]
 8002e46:	444e      	add	r6, r9
 8002e48:	6026      	str	r6, [r4, #0]
 8002e4a:	463e      	mov	r6, r7
 8002e4c:	6165      	str	r5, [r4, #20]
 8002e4e:	eba5 0509 	sub.w	r5, r5, r9
 8002e52:	60a5      	str	r5, [r4, #8]
 8002e54:	42be      	cmp	r6, r7
 8002e56:	d900      	bls.n	8002e5a <__ssputs_r+0x72>
 8002e58:	463e      	mov	r6, r7
 8002e5a:	4632      	mov	r2, r6
 8002e5c:	4641      	mov	r1, r8
 8002e5e:	6820      	ldr	r0, [r4, #0]
 8002e60:	f000 faac 	bl	80033bc <memmove>
 8002e64:	2000      	movs	r0, #0
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	1b9b      	subs	r3, r3, r6
 8002e6a:	60a3      	str	r3, [r4, #8]
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	4433      	add	r3, r6
 8002e70:	6023      	str	r3, [r4, #0]
 8002e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e76:	462a      	mov	r2, r5
 8002e78:	f000 fae6 	bl	8003448 <_realloc_r>
 8002e7c:	4606      	mov	r6, r0
 8002e7e:	2800      	cmp	r0, #0
 8002e80:	d1e0      	bne.n	8002e44 <__ssputs_r+0x5c>
 8002e82:	4650      	mov	r0, sl
 8002e84:	6921      	ldr	r1, [r4, #16]
 8002e86:	f7ff feb9 	bl	8002bfc <_free_r>
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	f8ca 3000 	str.w	r3, [sl]
 8002e90:	89a3      	ldrh	r3, [r4, #12]
 8002e92:	f04f 30ff 	mov.w	r0, #4294967295
 8002e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e9a:	81a3      	strh	r3, [r4, #12]
 8002e9c:	e7e9      	b.n	8002e72 <__ssputs_r+0x8a>
	...

08002ea0 <_svfiprintf_r>:
 8002ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ea4:	4698      	mov	r8, r3
 8002ea6:	898b      	ldrh	r3, [r1, #12]
 8002ea8:	4607      	mov	r7, r0
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	460d      	mov	r5, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	b09d      	sub	sp, #116	@ 0x74
 8002eb2:	d510      	bpl.n	8002ed6 <_svfiprintf_r+0x36>
 8002eb4:	690b      	ldr	r3, [r1, #16]
 8002eb6:	b973      	cbnz	r3, 8002ed6 <_svfiprintf_r+0x36>
 8002eb8:	2140      	movs	r1, #64	@ 0x40
 8002eba:	f7ff ff09 	bl	8002cd0 <_malloc_r>
 8002ebe:	6028      	str	r0, [r5, #0]
 8002ec0:	6128      	str	r0, [r5, #16]
 8002ec2:	b930      	cbnz	r0, 8002ed2 <_svfiprintf_r+0x32>
 8002ec4:	230c      	movs	r3, #12
 8002ec6:	603b      	str	r3, [r7, #0]
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	b01d      	add	sp, #116	@ 0x74
 8002ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ed2:	2340      	movs	r3, #64	@ 0x40
 8002ed4:	616b      	str	r3, [r5, #20]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	9309      	str	r3, [sp, #36]	@ 0x24
 8002eda:	2320      	movs	r3, #32
 8002edc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002ee0:	2330      	movs	r3, #48	@ 0x30
 8002ee2:	f04f 0901 	mov.w	r9, #1
 8002ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8002eea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003084 <_svfiprintf_r+0x1e4>
 8002eee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002ef2:	4623      	mov	r3, r4
 8002ef4:	469a      	mov	sl, r3
 8002ef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002efa:	b10a      	cbz	r2, 8002f00 <_svfiprintf_r+0x60>
 8002efc:	2a25      	cmp	r2, #37	@ 0x25
 8002efe:	d1f9      	bne.n	8002ef4 <_svfiprintf_r+0x54>
 8002f00:	ebba 0b04 	subs.w	fp, sl, r4
 8002f04:	d00b      	beq.n	8002f1e <_svfiprintf_r+0x7e>
 8002f06:	465b      	mov	r3, fp
 8002f08:	4622      	mov	r2, r4
 8002f0a:	4629      	mov	r1, r5
 8002f0c:	4638      	mov	r0, r7
 8002f0e:	f7ff ff6b 	bl	8002de8 <__ssputs_r>
 8002f12:	3001      	adds	r0, #1
 8002f14:	f000 80a7 	beq.w	8003066 <_svfiprintf_r+0x1c6>
 8002f18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002f1a:	445a      	add	r2, fp
 8002f1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8002f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 809f 	beq.w	8003066 <_svfiprintf_r+0x1c6>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002f32:	f10a 0a01 	add.w	sl, sl, #1
 8002f36:	9304      	str	r3, [sp, #16]
 8002f38:	9307      	str	r3, [sp, #28]
 8002f3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002f3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8002f40:	4654      	mov	r4, sl
 8002f42:	2205      	movs	r2, #5
 8002f44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002f48:	484e      	ldr	r0, [pc, #312]	@ (8003084 <_svfiprintf_r+0x1e4>)
 8002f4a:	f000 fa61 	bl	8003410 <memchr>
 8002f4e:	9a04      	ldr	r2, [sp, #16]
 8002f50:	b9d8      	cbnz	r0, 8002f8a <_svfiprintf_r+0xea>
 8002f52:	06d0      	lsls	r0, r2, #27
 8002f54:	bf44      	itt	mi
 8002f56:	2320      	movmi	r3, #32
 8002f58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f5c:	0711      	lsls	r1, r2, #28
 8002f5e:	bf44      	itt	mi
 8002f60:	232b      	movmi	r3, #43	@ 0x2b
 8002f62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002f66:	f89a 3000 	ldrb.w	r3, [sl]
 8002f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8002f6c:	d015      	beq.n	8002f9a <_svfiprintf_r+0xfa>
 8002f6e:	4654      	mov	r4, sl
 8002f70:	2000      	movs	r0, #0
 8002f72:	f04f 0c0a 	mov.w	ip, #10
 8002f76:	9a07      	ldr	r2, [sp, #28]
 8002f78:	4621      	mov	r1, r4
 8002f7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002f7e:	3b30      	subs	r3, #48	@ 0x30
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	d94b      	bls.n	800301c <_svfiprintf_r+0x17c>
 8002f84:	b1b0      	cbz	r0, 8002fb4 <_svfiprintf_r+0x114>
 8002f86:	9207      	str	r2, [sp, #28]
 8002f88:	e014      	b.n	8002fb4 <_svfiprintf_r+0x114>
 8002f8a:	eba0 0308 	sub.w	r3, r0, r8
 8002f8e:	fa09 f303 	lsl.w	r3, r9, r3
 8002f92:	4313      	orrs	r3, r2
 8002f94:	46a2      	mov	sl, r4
 8002f96:	9304      	str	r3, [sp, #16]
 8002f98:	e7d2      	b.n	8002f40 <_svfiprintf_r+0xa0>
 8002f9a:	9b03      	ldr	r3, [sp, #12]
 8002f9c:	1d19      	adds	r1, r3, #4
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	9103      	str	r1, [sp, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bfbb      	ittet	lt
 8002fa6:	425b      	neglt	r3, r3
 8002fa8:	f042 0202 	orrlt.w	r2, r2, #2
 8002fac:	9307      	strge	r3, [sp, #28]
 8002fae:	9307      	strlt	r3, [sp, #28]
 8002fb0:	bfb8      	it	lt
 8002fb2:	9204      	strlt	r2, [sp, #16]
 8002fb4:	7823      	ldrb	r3, [r4, #0]
 8002fb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8002fb8:	d10a      	bne.n	8002fd0 <_svfiprintf_r+0x130>
 8002fba:	7863      	ldrb	r3, [r4, #1]
 8002fbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8002fbe:	d132      	bne.n	8003026 <_svfiprintf_r+0x186>
 8002fc0:	9b03      	ldr	r3, [sp, #12]
 8002fc2:	3402      	adds	r4, #2
 8002fc4:	1d1a      	adds	r2, r3, #4
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	9203      	str	r2, [sp, #12]
 8002fca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002fce:	9305      	str	r3, [sp, #20]
 8002fd0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003088 <_svfiprintf_r+0x1e8>
 8002fd4:	2203      	movs	r2, #3
 8002fd6:	4650      	mov	r0, sl
 8002fd8:	7821      	ldrb	r1, [r4, #0]
 8002fda:	f000 fa19 	bl	8003410 <memchr>
 8002fde:	b138      	cbz	r0, 8002ff0 <_svfiprintf_r+0x150>
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	9b04      	ldr	r3, [sp, #16]
 8002fe4:	eba0 000a 	sub.w	r0, r0, sl
 8002fe8:	4082      	lsls	r2, r0
 8002fea:	4313      	orrs	r3, r2
 8002fec:	3401      	adds	r4, #1
 8002fee:	9304      	str	r3, [sp, #16]
 8002ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ff4:	2206      	movs	r2, #6
 8002ff6:	4825      	ldr	r0, [pc, #148]	@ (800308c <_svfiprintf_r+0x1ec>)
 8002ff8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002ffc:	f000 fa08 	bl	8003410 <memchr>
 8003000:	2800      	cmp	r0, #0
 8003002:	d036      	beq.n	8003072 <_svfiprintf_r+0x1d2>
 8003004:	4b22      	ldr	r3, [pc, #136]	@ (8003090 <_svfiprintf_r+0x1f0>)
 8003006:	bb1b      	cbnz	r3, 8003050 <_svfiprintf_r+0x1b0>
 8003008:	9b03      	ldr	r3, [sp, #12]
 800300a:	3307      	adds	r3, #7
 800300c:	f023 0307 	bic.w	r3, r3, #7
 8003010:	3308      	adds	r3, #8
 8003012:	9303      	str	r3, [sp, #12]
 8003014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003016:	4433      	add	r3, r6
 8003018:	9309      	str	r3, [sp, #36]	@ 0x24
 800301a:	e76a      	b.n	8002ef2 <_svfiprintf_r+0x52>
 800301c:	460c      	mov	r4, r1
 800301e:	2001      	movs	r0, #1
 8003020:	fb0c 3202 	mla	r2, ip, r2, r3
 8003024:	e7a8      	b.n	8002f78 <_svfiprintf_r+0xd8>
 8003026:	2300      	movs	r3, #0
 8003028:	f04f 0c0a 	mov.w	ip, #10
 800302c:	4619      	mov	r1, r3
 800302e:	3401      	adds	r4, #1
 8003030:	9305      	str	r3, [sp, #20]
 8003032:	4620      	mov	r0, r4
 8003034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003038:	3a30      	subs	r2, #48	@ 0x30
 800303a:	2a09      	cmp	r2, #9
 800303c:	d903      	bls.n	8003046 <_svfiprintf_r+0x1a6>
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0c6      	beq.n	8002fd0 <_svfiprintf_r+0x130>
 8003042:	9105      	str	r1, [sp, #20]
 8003044:	e7c4      	b.n	8002fd0 <_svfiprintf_r+0x130>
 8003046:	4604      	mov	r4, r0
 8003048:	2301      	movs	r3, #1
 800304a:	fb0c 2101 	mla	r1, ip, r1, r2
 800304e:	e7f0      	b.n	8003032 <_svfiprintf_r+0x192>
 8003050:	ab03      	add	r3, sp, #12
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	462a      	mov	r2, r5
 8003056:	4638      	mov	r0, r7
 8003058:	4b0e      	ldr	r3, [pc, #56]	@ (8003094 <_svfiprintf_r+0x1f4>)
 800305a:	a904      	add	r1, sp, #16
 800305c:	f3af 8000 	nop.w
 8003060:	1c42      	adds	r2, r0, #1
 8003062:	4606      	mov	r6, r0
 8003064:	d1d6      	bne.n	8003014 <_svfiprintf_r+0x174>
 8003066:	89ab      	ldrh	r3, [r5, #12]
 8003068:	065b      	lsls	r3, r3, #25
 800306a:	f53f af2d 	bmi.w	8002ec8 <_svfiprintf_r+0x28>
 800306e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003070:	e72c      	b.n	8002ecc <_svfiprintf_r+0x2c>
 8003072:	ab03      	add	r3, sp, #12
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	462a      	mov	r2, r5
 8003078:	4638      	mov	r0, r7
 800307a:	4b06      	ldr	r3, [pc, #24]	@ (8003094 <_svfiprintf_r+0x1f4>)
 800307c:	a904      	add	r1, sp, #16
 800307e:	f000 f87d 	bl	800317c <_printf_i>
 8003082:	e7ed      	b.n	8003060 <_svfiprintf_r+0x1c0>
 8003084:	08004a26 	.word	0x08004a26
 8003088:	08004a2c 	.word	0x08004a2c
 800308c:	08004a30 	.word	0x08004a30
 8003090:	00000000 	.word	0x00000000
 8003094:	08002de9 	.word	0x08002de9

08003098 <_printf_common>:
 8003098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800309c:	4616      	mov	r6, r2
 800309e:	4698      	mov	r8, r3
 80030a0:	688a      	ldr	r2, [r1, #8]
 80030a2:	690b      	ldr	r3, [r1, #16]
 80030a4:	4607      	mov	r7, r0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	bfb8      	it	lt
 80030aa:	4613      	movlt	r3, r2
 80030ac:	6033      	str	r3, [r6, #0]
 80030ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80030b2:	460c      	mov	r4, r1
 80030b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80030b8:	b10a      	cbz	r2, 80030be <_printf_common+0x26>
 80030ba:	3301      	adds	r3, #1
 80030bc:	6033      	str	r3, [r6, #0]
 80030be:	6823      	ldr	r3, [r4, #0]
 80030c0:	0699      	lsls	r1, r3, #26
 80030c2:	bf42      	ittt	mi
 80030c4:	6833      	ldrmi	r3, [r6, #0]
 80030c6:	3302      	addmi	r3, #2
 80030c8:	6033      	strmi	r3, [r6, #0]
 80030ca:	6825      	ldr	r5, [r4, #0]
 80030cc:	f015 0506 	ands.w	r5, r5, #6
 80030d0:	d106      	bne.n	80030e0 <_printf_common+0x48>
 80030d2:	f104 0a19 	add.w	sl, r4, #25
 80030d6:	68e3      	ldr	r3, [r4, #12]
 80030d8:	6832      	ldr	r2, [r6, #0]
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	42ab      	cmp	r3, r5
 80030de:	dc2b      	bgt.n	8003138 <_printf_common+0xa0>
 80030e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80030e4:	6822      	ldr	r2, [r4, #0]
 80030e6:	3b00      	subs	r3, #0
 80030e8:	bf18      	it	ne
 80030ea:	2301      	movne	r3, #1
 80030ec:	0692      	lsls	r2, r2, #26
 80030ee:	d430      	bmi.n	8003152 <_printf_common+0xba>
 80030f0:	4641      	mov	r1, r8
 80030f2:	4638      	mov	r0, r7
 80030f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80030f8:	47c8      	blx	r9
 80030fa:	3001      	adds	r0, #1
 80030fc:	d023      	beq.n	8003146 <_printf_common+0xae>
 80030fe:	6823      	ldr	r3, [r4, #0]
 8003100:	6922      	ldr	r2, [r4, #16]
 8003102:	f003 0306 	and.w	r3, r3, #6
 8003106:	2b04      	cmp	r3, #4
 8003108:	bf14      	ite	ne
 800310a:	2500      	movne	r5, #0
 800310c:	6833      	ldreq	r3, [r6, #0]
 800310e:	f04f 0600 	mov.w	r6, #0
 8003112:	bf08      	it	eq
 8003114:	68e5      	ldreq	r5, [r4, #12]
 8003116:	f104 041a 	add.w	r4, r4, #26
 800311a:	bf08      	it	eq
 800311c:	1aed      	subeq	r5, r5, r3
 800311e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003122:	bf08      	it	eq
 8003124:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003128:	4293      	cmp	r3, r2
 800312a:	bfc4      	itt	gt
 800312c:	1a9b      	subgt	r3, r3, r2
 800312e:	18ed      	addgt	r5, r5, r3
 8003130:	42b5      	cmp	r5, r6
 8003132:	d11a      	bne.n	800316a <_printf_common+0xd2>
 8003134:	2000      	movs	r0, #0
 8003136:	e008      	b.n	800314a <_printf_common+0xb2>
 8003138:	2301      	movs	r3, #1
 800313a:	4652      	mov	r2, sl
 800313c:	4641      	mov	r1, r8
 800313e:	4638      	mov	r0, r7
 8003140:	47c8      	blx	r9
 8003142:	3001      	adds	r0, #1
 8003144:	d103      	bne.n	800314e <_printf_common+0xb6>
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314e:	3501      	adds	r5, #1
 8003150:	e7c1      	b.n	80030d6 <_printf_common+0x3e>
 8003152:	2030      	movs	r0, #48	@ 0x30
 8003154:	18e1      	adds	r1, r4, r3
 8003156:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003160:	4422      	add	r2, r4
 8003162:	3302      	adds	r3, #2
 8003164:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003168:	e7c2      	b.n	80030f0 <_printf_common+0x58>
 800316a:	2301      	movs	r3, #1
 800316c:	4622      	mov	r2, r4
 800316e:	4641      	mov	r1, r8
 8003170:	4638      	mov	r0, r7
 8003172:	47c8      	blx	r9
 8003174:	3001      	adds	r0, #1
 8003176:	d0e6      	beq.n	8003146 <_printf_common+0xae>
 8003178:	3601      	adds	r6, #1
 800317a:	e7d9      	b.n	8003130 <_printf_common+0x98>

0800317c <_printf_i>:
 800317c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003180:	7e0f      	ldrb	r7, [r1, #24]
 8003182:	4691      	mov	r9, r2
 8003184:	2f78      	cmp	r7, #120	@ 0x78
 8003186:	4680      	mov	r8, r0
 8003188:	460c      	mov	r4, r1
 800318a:	469a      	mov	sl, r3
 800318c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800318e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003192:	d807      	bhi.n	80031a4 <_printf_i+0x28>
 8003194:	2f62      	cmp	r7, #98	@ 0x62
 8003196:	d80a      	bhi.n	80031ae <_printf_i+0x32>
 8003198:	2f00      	cmp	r7, #0
 800319a:	f000 80d3 	beq.w	8003344 <_printf_i+0x1c8>
 800319e:	2f58      	cmp	r7, #88	@ 0x58
 80031a0:	f000 80ba 	beq.w	8003318 <_printf_i+0x19c>
 80031a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80031a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80031ac:	e03a      	b.n	8003224 <_printf_i+0xa8>
 80031ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80031b2:	2b15      	cmp	r3, #21
 80031b4:	d8f6      	bhi.n	80031a4 <_printf_i+0x28>
 80031b6:	a101      	add	r1, pc, #4	@ (adr r1, 80031bc <_printf_i+0x40>)
 80031b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031bc:	08003215 	.word	0x08003215
 80031c0:	08003229 	.word	0x08003229
 80031c4:	080031a5 	.word	0x080031a5
 80031c8:	080031a5 	.word	0x080031a5
 80031cc:	080031a5 	.word	0x080031a5
 80031d0:	080031a5 	.word	0x080031a5
 80031d4:	08003229 	.word	0x08003229
 80031d8:	080031a5 	.word	0x080031a5
 80031dc:	080031a5 	.word	0x080031a5
 80031e0:	080031a5 	.word	0x080031a5
 80031e4:	080031a5 	.word	0x080031a5
 80031e8:	0800332b 	.word	0x0800332b
 80031ec:	08003253 	.word	0x08003253
 80031f0:	080032e5 	.word	0x080032e5
 80031f4:	080031a5 	.word	0x080031a5
 80031f8:	080031a5 	.word	0x080031a5
 80031fc:	0800334d 	.word	0x0800334d
 8003200:	080031a5 	.word	0x080031a5
 8003204:	08003253 	.word	0x08003253
 8003208:	080031a5 	.word	0x080031a5
 800320c:	080031a5 	.word	0x080031a5
 8003210:	080032ed 	.word	0x080032ed
 8003214:	6833      	ldr	r3, [r6, #0]
 8003216:	1d1a      	adds	r2, r3, #4
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6032      	str	r2, [r6, #0]
 800321c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003220:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003224:	2301      	movs	r3, #1
 8003226:	e09e      	b.n	8003366 <_printf_i+0x1ea>
 8003228:	6833      	ldr	r3, [r6, #0]
 800322a:	6820      	ldr	r0, [r4, #0]
 800322c:	1d19      	adds	r1, r3, #4
 800322e:	6031      	str	r1, [r6, #0]
 8003230:	0606      	lsls	r6, r0, #24
 8003232:	d501      	bpl.n	8003238 <_printf_i+0xbc>
 8003234:	681d      	ldr	r5, [r3, #0]
 8003236:	e003      	b.n	8003240 <_printf_i+0xc4>
 8003238:	0645      	lsls	r5, r0, #25
 800323a:	d5fb      	bpl.n	8003234 <_printf_i+0xb8>
 800323c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003240:	2d00      	cmp	r5, #0
 8003242:	da03      	bge.n	800324c <_printf_i+0xd0>
 8003244:	232d      	movs	r3, #45	@ 0x2d
 8003246:	426d      	negs	r5, r5
 8003248:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800324c:	230a      	movs	r3, #10
 800324e:	4859      	ldr	r0, [pc, #356]	@ (80033b4 <_printf_i+0x238>)
 8003250:	e011      	b.n	8003276 <_printf_i+0xfa>
 8003252:	6821      	ldr	r1, [r4, #0]
 8003254:	6833      	ldr	r3, [r6, #0]
 8003256:	0608      	lsls	r0, r1, #24
 8003258:	f853 5b04 	ldr.w	r5, [r3], #4
 800325c:	d402      	bmi.n	8003264 <_printf_i+0xe8>
 800325e:	0649      	lsls	r1, r1, #25
 8003260:	bf48      	it	mi
 8003262:	b2ad      	uxthmi	r5, r5
 8003264:	2f6f      	cmp	r7, #111	@ 0x6f
 8003266:	6033      	str	r3, [r6, #0]
 8003268:	bf14      	ite	ne
 800326a:	230a      	movne	r3, #10
 800326c:	2308      	moveq	r3, #8
 800326e:	4851      	ldr	r0, [pc, #324]	@ (80033b4 <_printf_i+0x238>)
 8003270:	2100      	movs	r1, #0
 8003272:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003276:	6866      	ldr	r6, [r4, #4]
 8003278:	2e00      	cmp	r6, #0
 800327a:	bfa8      	it	ge
 800327c:	6821      	ldrge	r1, [r4, #0]
 800327e:	60a6      	str	r6, [r4, #8]
 8003280:	bfa4      	itt	ge
 8003282:	f021 0104 	bicge.w	r1, r1, #4
 8003286:	6021      	strge	r1, [r4, #0]
 8003288:	b90d      	cbnz	r5, 800328e <_printf_i+0x112>
 800328a:	2e00      	cmp	r6, #0
 800328c:	d04b      	beq.n	8003326 <_printf_i+0x1aa>
 800328e:	4616      	mov	r6, r2
 8003290:	fbb5 f1f3 	udiv	r1, r5, r3
 8003294:	fb03 5711 	mls	r7, r3, r1, r5
 8003298:	5dc7      	ldrb	r7, [r0, r7]
 800329a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800329e:	462f      	mov	r7, r5
 80032a0:	42bb      	cmp	r3, r7
 80032a2:	460d      	mov	r5, r1
 80032a4:	d9f4      	bls.n	8003290 <_printf_i+0x114>
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d10b      	bne.n	80032c2 <_printf_i+0x146>
 80032aa:	6823      	ldr	r3, [r4, #0]
 80032ac:	07df      	lsls	r7, r3, #31
 80032ae:	d508      	bpl.n	80032c2 <_printf_i+0x146>
 80032b0:	6923      	ldr	r3, [r4, #16]
 80032b2:	6861      	ldr	r1, [r4, #4]
 80032b4:	4299      	cmp	r1, r3
 80032b6:	bfde      	ittt	le
 80032b8:	2330      	movle	r3, #48	@ 0x30
 80032ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80032be:	f106 36ff 	addle.w	r6, r6, #4294967295
 80032c2:	1b92      	subs	r2, r2, r6
 80032c4:	6122      	str	r2, [r4, #16]
 80032c6:	464b      	mov	r3, r9
 80032c8:	4621      	mov	r1, r4
 80032ca:	4640      	mov	r0, r8
 80032cc:	f8cd a000 	str.w	sl, [sp]
 80032d0:	aa03      	add	r2, sp, #12
 80032d2:	f7ff fee1 	bl	8003098 <_printf_common>
 80032d6:	3001      	adds	r0, #1
 80032d8:	d14a      	bne.n	8003370 <_printf_i+0x1f4>
 80032da:	f04f 30ff 	mov.w	r0, #4294967295
 80032de:	b004      	add	sp, #16
 80032e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032e4:	6823      	ldr	r3, [r4, #0]
 80032e6:	f043 0320 	orr.w	r3, r3, #32
 80032ea:	6023      	str	r3, [r4, #0]
 80032ec:	2778      	movs	r7, #120	@ 0x78
 80032ee:	4832      	ldr	r0, [pc, #200]	@ (80033b8 <_printf_i+0x23c>)
 80032f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	6831      	ldr	r1, [r6, #0]
 80032f8:	061f      	lsls	r7, r3, #24
 80032fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80032fe:	d402      	bmi.n	8003306 <_printf_i+0x18a>
 8003300:	065f      	lsls	r7, r3, #25
 8003302:	bf48      	it	mi
 8003304:	b2ad      	uxthmi	r5, r5
 8003306:	6031      	str	r1, [r6, #0]
 8003308:	07d9      	lsls	r1, r3, #31
 800330a:	bf44      	itt	mi
 800330c:	f043 0320 	orrmi.w	r3, r3, #32
 8003310:	6023      	strmi	r3, [r4, #0]
 8003312:	b11d      	cbz	r5, 800331c <_printf_i+0x1a0>
 8003314:	2310      	movs	r3, #16
 8003316:	e7ab      	b.n	8003270 <_printf_i+0xf4>
 8003318:	4826      	ldr	r0, [pc, #152]	@ (80033b4 <_printf_i+0x238>)
 800331a:	e7e9      	b.n	80032f0 <_printf_i+0x174>
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	f023 0320 	bic.w	r3, r3, #32
 8003322:	6023      	str	r3, [r4, #0]
 8003324:	e7f6      	b.n	8003314 <_printf_i+0x198>
 8003326:	4616      	mov	r6, r2
 8003328:	e7bd      	b.n	80032a6 <_printf_i+0x12a>
 800332a:	6833      	ldr	r3, [r6, #0]
 800332c:	6825      	ldr	r5, [r4, #0]
 800332e:	1d18      	adds	r0, r3, #4
 8003330:	6961      	ldr	r1, [r4, #20]
 8003332:	6030      	str	r0, [r6, #0]
 8003334:	062e      	lsls	r6, r5, #24
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	d501      	bpl.n	800333e <_printf_i+0x1c2>
 800333a:	6019      	str	r1, [r3, #0]
 800333c:	e002      	b.n	8003344 <_printf_i+0x1c8>
 800333e:	0668      	lsls	r0, r5, #25
 8003340:	d5fb      	bpl.n	800333a <_printf_i+0x1be>
 8003342:	8019      	strh	r1, [r3, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	4616      	mov	r6, r2
 8003348:	6123      	str	r3, [r4, #16]
 800334a:	e7bc      	b.n	80032c6 <_printf_i+0x14a>
 800334c:	6833      	ldr	r3, [r6, #0]
 800334e:	2100      	movs	r1, #0
 8003350:	1d1a      	adds	r2, r3, #4
 8003352:	6032      	str	r2, [r6, #0]
 8003354:	681e      	ldr	r6, [r3, #0]
 8003356:	6862      	ldr	r2, [r4, #4]
 8003358:	4630      	mov	r0, r6
 800335a:	f000 f859 	bl	8003410 <memchr>
 800335e:	b108      	cbz	r0, 8003364 <_printf_i+0x1e8>
 8003360:	1b80      	subs	r0, r0, r6
 8003362:	6060      	str	r0, [r4, #4]
 8003364:	6863      	ldr	r3, [r4, #4]
 8003366:	6123      	str	r3, [r4, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800336e:	e7aa      	b.n	80032c6 <_printf_i+0x14a>
 8003370:	4632      	mov	r2, r6
 8003372:	4649      	mov	r1, r9
 8003374:	4640      	mov	r0, r8
 8003376:	6923      	ldr	r3, [r4, #16]
 8003378:	47d0      	blx	sl
 800337a:	3001      	adds	r0, #1
 800337c:	d0ad      	beq.n	80032da <_printf_i+0x15e>
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	079b      	lsls	r3, r3, #30
 8003382:	d413      	bmi.n	80033ac <_printf_i+0x230>
 8003384:	68e0      	ldr	r0, [r4, #12]
 8003386:	9b03      	ldr	r3, [sp, #12]
 8003388:	4298      	cmp	r0, r3
 800338a:	bfb8      	it	lt
 800338c:	4618      	movlt	r0, r3
 800338e:	e7a6      	b.n	80032de <_printf_i+0x162>
 8003390:	2301      	movs	r3, #1
 8003392:	4632      	mov	r2, r6
 8003394:	4649      	mov	r1, r9
 8003396:	4640      	mov	r0, r8
 8003398:	47d0      	blx	sl
 800339a:	3001      	adds	r0, #1
 800339c:	d09d      	beq.n	80032da <_printf_i+0x15e>
 800339e:	3501      	adds	r5, #1
 80033a0:	68e3      	ldr	r3, [r4, #12]
 80033a2:	9903      	ldr	r1, [sp, #12]
 80033a4:	1a5b      	subs	r3, r3, r1
 80033a6:	42ab      	cmp	r3, r5
 80033a8:	dcf2      	bgt.n	8003390 <_printf_i+0x214>
 80033aa:	e7eb      	b.n	8003384 <_printf_i+0x208>
 80033ac:	2500      	movs	r5, #0
 80033ae:	f104 0619 	add.w	r6, r4, #25
 80033b2:	e7f5      	b.n	80033a0 <_printf_i+0x224>
 80033b4:	08004a37 	.word	0x08004a37
 80033b8:	08004a48 	.word	0x08004a48

080033bc <memmove>:
 80033bc:	4288      	cmp	r0, r1
 80033be:	b510      	push	{r4, lr}
 80033c0:	eb01 0402 	add.w	r4, r1, r2
 80033c4:	d902      	bls.n	80033cc <memmove+0x10>
 80033c6:	4284      	cmp	r4, r0
 80033c8:	4623      	mov	r3, r4
 80033ca:	d807      	bhi.n	80033dc <memmove+0x20>
 80033cc:	1e43      	subs	r3, r0, #1
 80033ce:	42a1      	cmp	r1, r4
 80033d0:	d008      	beq.n	80033e4 <memmove+0x28>
 80033d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80033d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80033da:	e7f8      	b.n	80033ce <memmove+0x12>
 80033dc:	4601      	mov	r1, r0
 80033de:	4402      	add	r2, r0
 80033e0:	428a      	cmp	r2, r1
 80033e2:	d100      	bne.n	80033e6 <memmove+0x2a>
 80033e4:	bd10      	pop	{r4, pc}
 80033e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80033ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80033ee:	e7f7      	b.n	80033e0 <memmove+0x24>

080033f0 <_sbrk_r>:
 80033f0:	b538      	push	{r3, r4, r5, lr}
 80033f2:	2300      	movs	r3, #0
 80033f4:	4d05      	ldr	r5, [pc, #20]	@ (800340c <_sbrk_r+0x1c>)
 80033f6:	4604      	mov	r4, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	602b      	str	r3, [r5, #0]
 80033fc:	f7fd fe94 	bl	8001128 <_sbrk>
 8003400:	1c43      	adds	r3, r0, #1
 8003402:	d102      	bne.n	800340a <_sbrk_r+0x1a>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	b103      	cbz	r3, 800340a <_sbrk_r+0x1a>
 8003408:	6023      	str	r3, [r4, #0]
 800340a:	bd38      	pop	{r3, r4, r5, pc}
 800340c:	20000638 	.word	0x20000638

08003410 <memchr>:
 8003410:	4603      	mov	r3, r0
 8003412:	b510      	push	{r4, lr}
 8003414:	b2c9      	uxtb	r1, r1
 8003416:	4402      	add	r2, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	4618      	mov	r0, r3
 800341c:	d101      	bne.n	8003422 <memchr+0x12>
 800341e:	2000      	movs	r0, #0
 8003420:	e003      	b.n	800342a <memchr+0x1a>
 8003422:	7804      	ldrb	r4, [r0, #0]
 8003424:	3301      	adds	r3, #1
 8003426:	428c      	cmp	r4, r1
 8003428:	d1f6      	bne.n	8003418 <memchr+0x8>
 800342a:	bd10      	pop	{r4, pc}

0800342c <memcpy>:
 800342c:	440a      	add	r2, r1
 800342e:	4291      	cmp	r1, r2
 8003430:	f100 33ff 	add.w	r3, r0, #4294967295
 8003434:	d100      	bne.n	8003438 <memcpy+0xc>
 8003436:	4770      	bx	lr
 8003438:	b510      	push	{r4, lr}
 800343a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800343e:	4291      	cmp	r1, r2
 8003440:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003444:	d1f9      	bne.n	800343a <memcpy+0xe>
 8003446:	bd10      	pop	{r4, pc}

08003448 <_realloc_r>:
 8003448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800344c:	4680      	mov	r8, r0
 800344e:	4615      	mov	r5, r2
 8003450:	460c      	mov	r4, r1
 8003452:	b921      	cbnz	r1, 800345e <_realloc_r+0x16>
 8003454:	4611      	mov	r1, r2
 8003456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800345a:	f7ff bc39 	b.w	8002cd0 <_malloc_r>
 800345e:	b92a      	cbnz	r2, 800346c <_realloc_r+0x24>
 8003460:	f7ff fbcc 	bl	8002bfc <_free_r>
 8003464:	2400      	movs	r4, #0
 8003466:	4620      	mov	r0, r4
 8003468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800346c:	f000 f81a 	bl	80034a4 <_malloc_usable_size_r>
 8003470:	4285      	cmp	r5, r0
 8003472:	4606      	mov	r6, r0
 8003474:	d802      	bhi.n	800347c <_realloc_r+0x34>
 8003476:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800347a:	d8f4      	bhi.n	8003466 <_realloc_r+0x1e>
 800347c:	4629      	mov	r1, r5
 800347e:	4640      	mov	r0, r8
 8003480:	f7ff fc26 	bl	8002cd0 <_malloc_r>
 8003484:	4607      	mov	r7, r0
 8003486:	2800      	cmp	r0, #0
 8003488:	d0ec      	beq.n	8003464 <_realloc_r+0x1c>
 800348a:	42b5      	cmp	r5, r6
 800348c:	462a      	mov	r2, r5
 800348e:	4621      	mov	r1, r4
 8003490:	bf28      	it	cs
 8003492:	4632      	movcs	r2, r6
 8003494:	f7ff ffca 	bl	800342c <memcpy>
 8003498:	4621      	mov	r1, r4
 800349a:	4640      	mov	r0, r8
 800349c:	f7ff fbae 	bl	8002bfc <_free_r>
 80034a0:	463c      	mov	r4, r7
 80034a2:	e7e0      	b.n	8003466 <_realloc_r+0x1e>

080034a4 <_malloc_usable_size_r>:
 80034a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034a8:	1f18      	subs	r0, r3, #4
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	bfbc      	itt	lt
 80034ae:	580b      	ldrlt	r3, [r1, r0]
 80034b0:	18c0      	addlt	r0, r0, r3
 80034b2:	4770      	bx	lr

080034b4 <_init>:
 80034b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034b6:	bf00      	nop
 80034b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034ba:	bc08      	pop	{r3}
 80034bc:	469e      	mov	lr, r3
 80034be:	4770      	bx	lr

080034c0 <_fini>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr
